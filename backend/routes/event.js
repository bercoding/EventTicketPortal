const express = require('express');
const router = express.Router();
const asyncHandler = require('express-async-handler');
const Event = require('../models/Event');
const TicketType = require('../models/TicketType');
const { uploadEventImages } = require('../middleware/uploadMiddleware');

const {
  createEvent,
  createEventWithSeating,
  getEvents,
  getEventById,
  updateEvent,
  deleteEvent,
  getEventTicketStats,
  previewSeatingMap
} = require('../controllers/eventController');
const { protect, requireAdmin: admin } = require('../middleware/auth');


// --- LOGIC T·∫†M TH·ªúI ƒê∆Ø·ª¢C CHUY·ªÇN V√ÄO ƒê√ÇY ---
const updateSeatingMapTemp = asyncHandler(async (req, res) => {
    const eventId = req.params.id;
    const event = await Event.findById(eventId);

    if (!event) {
        res.status(404);
        throw new Error('Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán.');
    }
    
    if (event.organizer.toString() !== req.user._id.toString() && req.user.role !== 'admin') {
        res.status(401);
        throw new Error('Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.');
    }
    
    const ticketTypes = await TicketType.find({ event: event._id });
    if (ticketTypes.length === 0) {
        res.status(400);
        throw new Error("S·ª± ki·ªán n√†y ch∆∞a c√≥ lo·∫°i v√© n√†o.");
    }

    const generateSeatingMap = (ticketTiers) => {
        const sections = [];
        const seatsPerSection = 20;
        const rowsPerSection = 4;
        const seatsPerRow = 5;
        const seatSpacing = 20;
        const rowSpacing = 20;
        const sectionSpacing = 30;
        const totalSections = 6;
        const sectionsPerRow = 3;
        
        const totalBlockWidth = (sectionsPerRow * (seatsPerRow * seatSpacing)) + ((sectionsPerRow - 1) * sectionSpacing);
        const startX = 400 - (totalBlockWidth / 2);
        const startY = 150;
        
        // Th√¥ng tin s√¢n kh·∫•u ƒë∆∞·ª£c c·∫£i thi·ªán
        const stage = {
            x: 250,
            y: 30,
            width: 300,
            height: 60,
            centerX: 400,
            centerY: 60,
            gradient: {
                start: '#4f46e5', // M√†u t√≠m ƒë·∫≠m
                end: '#1e40af'     // M√†u xanh ƒë·∫≠m
            },
            lighting: [
                { x: 280, y: 20, radius: 3 },
                { x: 320, y: 20, radius: 3 },
                { x: 360, y: 20, radius: 3 },
                { x: 400, y: 20, radius: 3 },
                { x: 440, y: 20, radius: 3 },
                { x: 480, y: 20, radius: 3 },
                { x: 520, y: 20, radius: 3 }
            ]
        };
        
        for (let i = 0; i < totalSections; i++) {
            const sectionRowIndex = Math.floor(i / sectionsPerRow);
            const sectionColIndex = i % sectionsPerRow;
            const sectionX = startX + sectionColIndex * (seatsPerRow * seatSpacing + sectionSpacing);
            const sectionY = startY + sectionRowIndex * (rowsPerSection * rowSpacing + rowSpacing + 20);
            const sectionName = String.fromCharCode(65 + i);
            const ticketTier = ticketTiers[i % ticketTiers.length]._id;
            
            const section = {
                name: sectionName,
                ticketTier: ticketTier,
                rows: [],
                labelPosition: {
                    x: sectionX + ((seatsPerRow - 1) * seatSpacing) / 2,
                    y: sectionY - 15
                }
            };
            
            for (let j = 0; j < rowsPerSection; j++) {
                const row = {
                    name: `${sectionName}${j + 1}`,
                    seats: []
                };
                
                for (let k = 0; k < seatsPerRow; k++) {
                    row.seats.push({
                        number: `${row.name}-${k + 1}`,
                        status: 'available',
                        x: sectionX + k * seatSpacing,
                        y: sectionY + j * rowSpacing
                    });
                }
                
                section.rows.push(row);
            }
            
            sections.push(section);
        }
        
        return { 
            layoutType: 'theater', 
            sections,
            stage: stage  // Th√™m th√¥ng tin s√¢n kh·∫•u v√†o seating map
        };
    };

    const newSeatingMap = generateSeatingMap(ticketTypes);
    event.seatingMap = newSeatingMap;
    const updatedEvent = await event.save();
    
    const populatedEvent = await Event.findById(updatedEvent._id)
        .populate('organizer', 'username fullName avatar')
        .populate('ticketTypes')
        .lean();
        
    res.status(200).json({
        success: true,
        message: 'C·∫≠p nh·∫≠t s∆° ƒë·ªì gh·∫ø th√†nh c√¥ng!',
        data: populatedEvent
    });
});
// --- K·∫æT TH√öC LOGIC T·∫†M TH·ªúI ---


// Routes - Specific routes FIRST, then parametric routes
router.route('/').get(getEvents).post(protect, createEvent);
router.route('/create-with-seating').post(protect, createEventWithSeating); // Route cho event owners
router.route('/preview-seating').post(previewSeatingMap); // Route preview seating map - no auth needed

// My events route for event owners
router.get('/my-events', protect, asyncHandler(async (req, res) => {
    try {
        console.log('üîç ƒêang t√¨m s·ª± ki·ªán cho user:', req.user._id, req.user.username);
        
        let events;

        // N·∫øu l√† admin, tr·∫£ v·ªÅ t·∫•t c·∫£ s·ª± ki·ªán
        if (req.user.role === 'admin') {
            console.log('üîç User l√† admin, tr·∫£ v·ªÅ t·∫•t c·∫£ s·ª± ki·ªán');
            events = await Event.find()
                .populate('organizers', 'username email fullName avatar')
                .populate('ticketTypes')
                .sort({ createdAt: -1 });
        } else {
            // N·∫øu kh√¥ng ph·∫£i admin, ch·ªâ tr·∫£ v·ªÅ s·ª± ki·ªán c·ªßa ng∆∞·ªùi t·ªï ch·ª©c
            events = await Event.find({ 
                organizers: { $in: [req.user._id] }
            })
            .populate('organizers', 'username email fullName avatar')
            .populate('ticketTypes')
            .sort({ createdAt: -1 });
            
            console.log(`üîç T√¨m th·∫•y ${events.length} s·ª± ki·ªán cho user ${req.user.username}`);
        }
        
        // Return direct array (kh√¥ng wrap trong object) ƒë·ªÉ frontend nh·∫≠n ƒë∆∞·ª£c
        res.json(events);
    } catch (error) {
        console.error('Error fetching my events:', error);
        res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch s·ª± ki·ªán', error: error.message });
    }
}));

// Test route first
router.get('/test-upload', (req, res) => {
    res.json({ success: true, message: 'Upload route works!' });
});

// Upload images route - BEFORE /:id route
router.post('/upload-images', protect, uploadEventImages.fields([
    { name: 'logo', maxCount: 1 },
    { name: 'banner', maxCount: 1 },
    { name: 'organizer_logo', maxCount: 1 }
]), asyncHandler(async (req, res) => {
    const files = req.files || {};
    const uploadedFiles = {};
    
    if (files.logo && files.logo.length > 0) {
        uploadedFiles.logo = `/uploads/events/${files.logo[0].filename}`;
    }
    if (files.banner && files.banner.length > 0) {
        uploadedFiles.banner = `/uploads/events/${files.banner[0].filename}`;
    }
    if (files.organizer_logo && files.organizer_logo.length > 0) {
        uploadedFiles.organizer_logo = `/uploads/events/${files.organizer_logo[0].filename}`;
    }
    
    res.status(200).json({
        success: true,
        message: 'Upload th√†nh c√¥ng!',
        data: uploadedFiles
    });
}));

// Parametric routes LAST
router.route('/:id').get(getEventById).put(protect, updateEvent).delete(protect, deleteEvent);
router.route('/:id/update-seating-map').post(protect, admin, updateSeatingMapTemp); // S·ª≠ d·ª•ng h√†m t·∫°m th·ªùi
router.route('/:eventId/ticket-stats').get(protect, getEventTicketStats); // Route ƒë·ªÉ xem th·ªëng k√™ v√©

// Admin route for updating featured/special/trending status
router.put('/:id/admin-update', protect, admin, asyncHandler(async (req, res) => {
    try {
        const eventId = req.params.id;
        const updateData = req.body;
        
        // Validate the event exists
        const event = await Event.findById(eventId);
        if (!event) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán'
            });
        }
        
        // Update the event with new data
        const updatedEvent = await Event.findByIdAndUpdate(
            eventId,
            updateData,
            { new: true, runValidators: true }
        ).populate('organizer', 'username fullName avatar email')
         .populate('ticketTypes');
        
        res.json({
            success: true,
            message: 'C·∫≠p nh·∫≠t s·ª± ki·ªán th√†nh c√¥ng',
            event: updatedEvent
        });
    } catch (error) {
        console.error('Error updating event:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi c·∫≠p nh·∫≠t s·ª± ki·ªán'
        });
    }
}));

// Mount nested review routes for events
router.use('/:eventId/reviews', require('../routes/review'));

module.exports = router; 