const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const { 
    getUserTickets, 
    returnTicket, 
    verifyTicket, 
    getTicketStats 
} = require('../controllers/ticketController');
const { protect, requireAdminOrEventOwner } = require('../middleware/auth');

// @desc    Get user's tickets
// @route   GET /api/tickets
// @access  Private (User only)
router.get('/', protect, getUserTickets);

// @desc    Return ticket
// @route   POST /api/tickets/:ticketId/return
// @access  Private (User only)
router.post('/:ticketId/return', protect, returnTicket);

// @desc    Verify ticket by QR code
// @route   POST /api/tickets/verify
// @access  Private (Admin/Owner only)
router.post('/verify', protect, requireAdminOrEventOwner, verifyTicket);

// @route   GET /api/tickets/stats/:eventId
// @desc    Get ticket check-in statistics for an event
// @access  Private (Admin/Owner only)
router.get('/stats/:eventId', protect, requireAdminOrEventOwner, getTicketStats);

// @route   GET /api/tickets/debug/stats/:eventId
// @desc    Debug endpoint for ticket check-in statistics (returns mock data)
// @access  Private (Admin/Owner only) - for testing only
router.get('/debug/stats/:eventId', protect, requireAdminOrEventOwner, (req, res) => {
  // D·ªØ li·ªáu m·∫´u cho vi·ªác ki·ªÉm th·ª≠
  const mockStats = {
    total: 100,
    used: 65,
    unused: 30,
    cancelled: 3,
    returned: 2,
    checkInsByHour: [
      { date: '2025-06-30', hour: 9, count: 8 },
      { date: '2025-06-30', hour: 10, count: 12 },
      { date: '2025-06-30', hour: 11, count: 15 },
      { date: '2025-06-30', hour: 12, count: 10 },
      { date: '2025-06-30', hour: 13, count: 20 }
    ]
  };
  
  res.status(200).json({
    success: true,
    stats: mockStats
  });
});

// @route   POST /api/tickets/debug/verify
// @desc    Debug endpoint for verifying tickets (returns mock data)
// @access  Private (Admin/Owner only) - for testing only
router.post('/debug/verify', protect, requireAdminOrEventOwner, (req, res) => {
  const { qrCode, eventId } = req.body;
  console.log('üîç DEBUG VERIFY API ƒê∆Ø·ª¢C G·ªåI:', qrCode, eventId);
  
  // Ki·ªÉm tra qrCode c√≥ ph·∫£i l√† m√£ v√© m·∫´u c·ªßa test kh√¥ng
  const isSampleTicket = qrCode && qrCode.includes(`EVENT-${eventId}-TICKET`);
  const isAlreadyUsed = qrCode && qrCode.includes('-used');
  
  if (!qrCode) {
    return res.status(400).json({ 
      success: false, 
      message: 'M√£ QR kh√¥ng ƒë∆∞·ª£c cung c·∫•p' 
    });
  }
  
  if (isAlreadyUsed) {
    return res.status(400).json({
      success: false,
      message: 'V√© n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
      usedAt: new Date(),
      ticket: {
        id: `ticket-${Date.now()}`,
        event: { title: 'S·ª± ki·ªán m·∫´u', id: eventId },
        user: { name: 'Ng∆∞·ªùi d√πng m·∫´u', email: 'user@example.com' },
        seat: { section: 'A', row: 'A1', number: '5' }
      }
    });
  }
  
  if (isSampleTicket) {
    return res.status(200).json({
      success: true,
      message: 'X√°c th·ª±c v√© th√†nh c√¥ng',
      ticket: {
        id: `ticket-${Date.now()}`,
        event: {
          id: eventId,
          title: 'S·ª± ki·ªán m·∫´u',
          date: new Date().toISOString()
        },
        user: {
          id: 'user123',
          name: 'Ng∆∞·ªùi d√πng m·∫´u',
          email: 'user@example.com',
          avatar: '/images/placeholder-avatar.svg'
        },
        seat: {
          section: 'A',
          row: 'A1',
          number: '5'
        },
        ticketType: 'VIP',
        price: 100000,
        purchaseDate: new Date().toISOString()
      }
    });
  }
  
  return res.status(404).json({
    success: false,
    message: 'V√© kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i'
  });
});

// Th√™m endpoint kh√¥ng c·∫ßn auth cho debug
// @route   GET /api/tickets/public/debug/stats/:eventId
// @desc    Public debug endpoint for ticket check-in statistics (returns mock data)
// @access  Public (for testing only)
router.get('/public/debug/stats/:eventId', (req, res) => {
  // D·ªØ li·ªáu m·∫´u cho vi·ªác ki·ªÉm th·ª≠
  const { eventId } = req.params;
  console.log('üî¢ PUBLIC DEBUG STATS API ƒê∆Ø·ª¢C G·ªåI cho s·ª± ki·ªán:', eventId);
  
  const mockStats = {
    total: 100,
    used: 65,
    unused: 30,
    cancelled: 3,
    returned: 2,
    checkInsByHour: [
      { date: '2025-06-30', hour: 9, count: 8 },
      { date: '2025-06-30', hour: 10, count: 12 },
      { date: '2025-06-30', hour: 11, count: 15 },
      { date: '2025-06-30', hour: 12, count: 10 },
      { date: '2025-06-30', hour: 13, count: 20 }
    ]
  };
  
  res.status(200).json({
    success: true,
    stats: mockStats
  });
});

// @route   POST /api/tickets/public/debug/verify
// @desc    Public debug endpoint for verifying tickets (returns mock data)
// @access  Public (for testing only)
router.post('/public/debug/verify', (req, res) => {
  const { qrCode, eventId } = req.body;
  console.log('üîç PUBLIC DEBUG VERIFY API ƒê∆Ø·ª¢C G·ªåI:', qrCode, eventId);
  
  // Ki·ªÉm tra qrCode c√≥ ph·∫£i l√† m√£ v√© m·∫´u c·ªßa test kh√¥ng
  const isSampleTicket = qrCode && (
    qrCode.includes(`EVENT-${eventId}-TICKET`) ||
    qrCode.includes(`TICKET-${eventId}`) ||
    qrCode.includes(`eventId=${eventId}`) ||
    qrCode.includes(`event=${eventId}`) ||
    qrCode.includes(`id=${eventId}`)
  );
  
  const isAlreadyUsed = qrCode && qrCode.includes('-used');
  
  if (!qrCode) {
    return res.status(400).json({ 
      success: false, 
      message: 'M√£ QR kh√¥ng ƒë∆∞·ª£c cung c·∫•p' 
    });
  }

  console.log('ƒêang ki·ªÉm tra m√£ QR:', qrCode);
  console.log('L√† v√© m·∫´u?', isSampleTicket);
  console.log('ƒê√£ s·ª≠ d·ª•ng?', isAlreadyUsed);
  
  if (isAlreadyUsed) {
    return res.status(400).json({
      success: false,
      message: 'V√© n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
      usedAt: new Date(),
      ticket: {
        id: `ticket-${Date.now()}`,
        event: { title: 'S·ª± ki·ªán m·∫´u', id: eventId },
        user: { name: 'Ng∆∞·ªùi d√πng m·∫´u', email: 'user@example.com' },
        seat: { section: 'A', row: 'A1', number: '5' }
      }
    });
  }
  
  // Ch·∫•p nh·∫≠n m·ªçi QR code c√≥ th√¥ng tin chu·ªói
  if (qrCode && qrCode.length > 5) {
    return res.status(200).json({
      success: true,
      message: 'X√°c th·ª±c v√© th√†nh c√¥ng',
      ticket: {
        id: `ticket-${Date.now()}`,
        event: {
          id: eventId,
          title: 'S·ª± ki·ªán m·∫´u',
          date: new Date().toISOString()
        },
        user: {
          id: 'user123',
          name: 'Ng∆∞·ªùi d√πng m·∫´u',
          email: 'user@example.com',
          avatar: '/images/placeholder-avatar.svg'
        },
        seat: {
          section: 'A',
          row: 'A1',
          number: '5'
        },
        ticketType: 'VIP',
        price: 100000,
        purchaseDate: new Date().toISOString()
      }
    });
  }
  
  return res.status(404).json({
    success: false,
    message: 'V√© kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i'
  });
});

// Route c√¥ng khai cho debug QR scan kh√¥ng c·∫ßn auth
// @route   POST /api/tickets/public-verify
// @desc    Public endpoint for verifying any QR code (testing only)
// @access  Public
router.post('/public-verify', (req, res) => {
  const { qrCode, eventId } = req.body;
  console.log('üîç PUBLIC VERIFY API ƒê∆Ø·ª¢C G·ªåI:', qrCode, eventId);
  
  if (!qrCode) {
    return res.status(400).json({ 
      success: false, 
      message: 'M√£ QR kh√¥ng ƒë∆∞·ª£c cung c·∫•p' 
    });
  }
  
  // Always return success for any QR code
  return res.status(200).json({
    success: true,
    message: 'X√°c th·ª±c v√© th√†nh c√¥ng',
    ticket: {
      id: `ticket-${Date.now()}`,
      event: {
        id: eventId || 'unknown',
        title: 'S·ª± ki·ªán m·∫´u',
        date: new Date().toISOString()
      },
      user: {
        id: 'user123',
        name: 'Ng∆∞·ªùi d√πng m·∫´u',
        email: 'user@example.com',
        avatar: '/images/placeholder-avatar.svg'
      },
      seat: {
        section: 'A',
        row: 'A1',
        number: '5'
      },
      ticketType: 'VIP',
      price: 100000,
      purchaseDate: new Date().toISOString(),
      qrCode: qrCode
    }
  });
});

module.exports = router;