const express = require('express');
const router = express.Router();
const Event = require('../models/Event');

// H√†m t√¨m ki·∫øm s·ª± ki·ªán theo ƒë·ªãa ƒëi·ªÉm
const searchEventsByLocation = async (location) => {
  try {
    console.log('üîç Searching for events in:', location);
    
    const query = { 
      status: 'approved',
      'location.city': { $regex: location, $options: 'i' }
    };
    
    console.log('üìã MongoDB query:', JSON.stringify(query, null, 2));
    
    const events = await Event.find(query)
      .populate('organizers', 'username fullName avatar')
      .populate('ticketTypes')
      .limit(5)
      .sort({ startDate: 1 });
    
    console.log('üìä Events found:', events.length);
    events.forEach(event => {
      console.log(`- ${event.title} (${event.location.city})`);
    });
    
    return events;
  } catch (error) {
    console.error('‚ùå Error searching events:', error);
    return [];
  }
};

// H√†m t√¨m ki·∫øm s·ª± ki·ªán theo ch·ªß ƒë·ªÅ
const searchEventsByCategory = async (category) => {
  try {
    console.log('üéµ Searching for events with category:', category);
    
    const query = { 
      status: 'approved',
      $or: [
        { category: { $in: [category] } },
        { tags: { $in: [category] } }
      ]
    };
    
    console.log('üìã MongoDB query:', JSON.stringify(query, null, 2));
    
    const events = await Event.find(query)
      .populate('organizers', 'username fullName avatar')
      .populate('ticketTypes')
      .limit(5)
      .sort({ startDate: 1 });
    
    console.log('üìä Events found:', events.length);
    events.forEach(event => {
      console.log(`- ${event.title} (category: ${event.category?.join(', ')}, tags: ${event.tags?.join(', ')})`);
    });
    
    return events;
  } catch (error) {
    console.error('‚ùå Error searching events:', error);
    return [];
  }
};

// H√†m t√¨m ki·∫øm s·ª± ki·ªán theo ƒë·ªãa ƒëi·ªÉm V√Ä ch·ªß ƒë·ªÅ
const searchEventsByLocationAndCategory = async (location, category) => {
  try {
    console.log('üîç Searching for events in:', location, 'with category:', category);
    
    const query = { 
      status: 'approved',
      'location.city': { $regex: location, $options: 'i' },
      $or: [
        { category: { $in: [category] } },
        { tags: { $in: [category] } }
      ]
    };
    
    console.log('üìã MongoDB query:', JSON.stringify(query, null, 2));
    
    const events = await Event.find(query)
      .populate('organizers', 'username fullName avatar')
      .populate('ticketTypes')
      .limit(5)
      .sort({ startDate: 1 });
    
    console.log('üìä Events found:', events.length);
    events.forEach(event => {
      console.log(`- ${event.title} (${event.location.city}, category: ${event.category?.join(', ')}, tags: ${event.tags?.join(', ')})`);
    });
    
    return events;
  } catch (error) {
    console.error('‚ùå Error searching events:', error);
    return [];
  }
};

// H√†m t·∫°o context cho AI
const createEventContext = (events) => {
  if (!events || events.length === 0) {
    return "KH√îNG C√ì S·ª∞ KI·ªÜN N√ÄO";
  }
  
  let context = "C√ì S·ª∞ KI·ªÜN SAU:\n\n";
  events.forEach((event, index) => {
    const startDate = new Date(event.startDate).toLocaleDateString('vi-VN');
    const ticketTypes = event.ticketTypes?.map(tt => `${tt.name}: ${tt.price?.toLocaleString()}ƒë`) || [];
    
    context += `${index + 1}. **${event.title}**\n`;
    context += `   üìÖ Ng√†y: ${startDate}\n`;
    context += `   üìç ƒê·ªãa ƒëi·ªÉm: ${event.location.venueName || event.location.address || 'Ch∆∞a c·∫≠p nh·∫≠t'}\n`;
    context += `   üèôÔ∏è Th√†nh ph·ªë: ${event.location.city}\n`;
    if (event.category && event.category.length > 0) {
      context += `   üè∑Ô∏è Danh m·ª•c: ${event.category.join(', ')}\n`;
    }
    if (event.tags && event.tags.length > 0) {
      context += `   üè∑Ô∏è Tags: ${event.tags.join(', ')}\n`;
    }
    if (ticketTypes.length > 0) {
      context += `   üí∞ Gi√° v√©: ${ticketTypes.join(', ')}\n`;
    }
    if (event.description) {
      context += `   üìù M√¥ t·∫£: ${event.description.substring(0, 100)}${event.description.length > 100 ? '...' : ''}\n`;
    }
    context += `\n`;
  });
  
  return context;
};

// H√†m nh·∫≠n di·ªán ƒë·ªãa ƒëi·ªÉm t·ª´ message
const extractLocation = (message) => {
  const lowerMessage = message.toLowerCase();
  
  // Danh s√°ch c√°c th√†nh ph·ªë v√† mapping
  const cityMapping = {
    'ƒë√† n·∫µng': 'Th√†nh ph·ªë ƒê√† N·∫µng',
    'danang': 'Th√†nh ph·ªë ƒê√† N·∫µng',
    'h√† n·ªôi': 'Th√†nh ph·ªë H√† N·ªôi', 
    'hanoi': 'Th√†nh ph·ªë H√† N·ªôi',
    'tp.hcm': 'Th√†nh ph·ªë H·ªì Ch√≠ Minh',
    'ho chi minh': 'Th√†nh ph·ªë H·ªì Ch√≠ Minh',
    'h·ªì ch√≠ minh': 'Th√†nh ph·ªë H·ªì Ch√≠ Minh',
    'h·∫£i ph√≤ng': 'Th√†nh ph·ªë H·∫£i Ph√≤ng',
    'haiphong': 'Th√†nh ph·ªë H·∫£i Ph√≤ng',
    'ƒë·ªìng nai': 'T·ªânh ƒê·ªìng Nai',
    't·ªânh ƒë·ªìng nai': 'T·ªânh ƒê·ªìng Nai'
  };
  
  // T√¨m th√†nh ph·ªë trong message
  for (const [keyword, fullName] of Object.entries(cityMapping)) {
    if (lowerMessage.includes(keyword)) {
      console.log('üìç Found location:', keyword, '‚Üí', fullName);
      return fullName;
    }
  }
  
  return null;
};

// H√†m nh·∫≠n di·ªán category t·ª´ message
const extractCategory = (message) => {
  const lowerMessage = message.toLowerCase();
  
  // Danh s√°ch c√°c category v√† mapping - s·ª≠ d·ª•ng ƒë√∫ng t√™n trong database
  const categoryMapping = {
    '√¢m nh·∫°c': 'music',
    'nh·∫°c': 'music',
    'ca nh·∫°c': 'music',
    'concert': 'concert',
    'music': 'music',
    'th·ªÉ thao': 'sports',
    'b√≥ng ƒë√°': 'sports',
    'football': 'sports',
    'sports': 'sports',
    'workshop': 'workshop',
    'seminar': 'seminar',
    'conference': 'conference',
    'festival': 'festival',
    'l·ªÖ h·ªôi': 'festival',
    'tri·ªÉn l√£m': 'exhibition',
    'exhibition': 'exhibition',
    'theater': 'theater',
    'k·ªãch': 'theater',
    's√¢n kh·∫•u': 'theater'
  };
  
  // T√¨m category trong message
  for (const [keyword, category] of Object.entries(categoryMapping)) {
    if (lowerMessage.includes(keyword)) {
      console.log('üéµ Found category:', keyword, '‚Üí', category);
      return category;
    }
  }
  
  return null;
};

router.post('/openai-chat', async (req, res) => {
  const { message } = req.body;
  if (!message) return res.status(400).json({ error: 'Message is required' });
  
  try {
    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
    
        console.log('üí¨ User message:', message);
    
    // Nh·∫≠n di·ªán ƒë·ªãa ƒëi·ªÉm v√† category
    const location = extractLocation(message);
    const category = extractCategory(message);
    let events = [];
    let eventContext = '';
    
    console.log('üéØ Location detected:', location);
    console.log('üéµ Category detected:', category);
    
    // T√¨m s·ª± ki·ªán d·ª±a tr√™n location v√† category
    if (location && category) {
      console.log('üîç Searching by location AND category');
      events = await searchEventsByLocationAndCategory(location, category);
    } else if (location) {
      console.log('üîç Searching by location only');
      events = await searchEventsByLocation(location);
    } else if (category) {
      console.log('üîç Searching by category only');
      events = await searchEventsByCategory(category);
    }
    
    eventContext = createEventContext(events);
    console.log('üìù Event context:', eventContext);
    
    // T·∫°o system prompt
    let systemPrompt = 'B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán, lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.';
    
    if (events.length > 0) {
      let searchDescription = '';
      if (location && category) {
        searchDescription = `s·ª± ki·ªán ${category} ·ªü ${location}`;
      } else if (location) {
        searchDescription = `s·ª± ki·ªán ·ªü ${location}`;
      } else if (category) {
        searchDescription = `s·ª± ki·ªán ${category}`;
      }
      
      systemPrompt += `\n\nD·ªÆ LI·ªÜU S·ª∞ KI·ªÜN TH·ª∞C T·∫æ T·ª™ DATABASE (${searchDescription}):

${eventContext}

H∆Ø·ªöNG D·∫™N: 
- CH·ªà s·ª≠ d·ª•ng th√¥ng tin s·ª± ki·ªán t·ª´ database ·ªü tr√™n
- KH√îNG ƒê∆Ø·ª¢C b·ªãa th√™m s·ª± ki·ªán ho·∫∑c th√¥ng tin kh√¥ng c√≥ trong database
- Gi·ªõi thi·ªáu chi ti·∫øt c√°c s·ª± ki·ªán th·ª±c t·∫ø t·ª´ database cho ng∆∞·ªùi d√πng
- N·∫øu s·ª± ki·ªán c√≥ tags "music" ho·∫∑c "concert", ƒë√≥ l√† s·ª± ki·ªán √¢m nh·∫°c
- N·∫øu s·ª± ki·ªán c√≥ tags "sports", ƒë√≥ l√† s·ª± ki·ªán th·ªÉ thao
- N·∫øu c√≥ s·ª± ki·ªán trong danh s√°ch tr√™n, B·∫ÆT BU·ªòC ph·∫£i gi·ªõi thi·ªáu s·ª± ki·ªán ƒë√≥`;
      
      console.log('ü§ñ System prompt with events');
    } else {
      let noEventMessage = '';
      if (location && category) {
        noEventMessage = `Hi·ªán t·∫°i kh√¥ng c√≥ s·ª± ki·ªán ${category} n√†o ·ªü ${location}`;
      } else if (location) {
        noEventMessage = `Hi·ªán t·∫°i kh√¥ng c√≥ s·ª± ki·ªán n√†o ·ªü ${location}`;
      } else if (category) {
        noEventMessage = `Hi·ªán t·∫°i kh√¥ng c√≥ s·ª± ki·ªán ${category} n√†o`;
      } else {
        noEventMessage = `Hi·ªán t·∫°i kh√¥ng c√≥ s·ª± ki·ªán n√†o ph√π h·ª£p`;
      }
      
      systemPrompt += `\n\nH∆Ø·ªöNG D·∫™N: ${noEventMessage}. H√£y th√¥ng b√°o ƒëi·ªÅu n√†y cho ng∆∞·ªùi d√πng.`;
      
      console.log('ü§ñ System prompt - no events found');
    }
    
    // G·ªçi OpenAI API
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: message }
        ],
        max_tokens: 1000
      })
    });
    
    const data = await response.json();
    if (!response.ok) {
      console.error('OpenAI API error:', data);
      return res.status(500).json({ error: 'OpenAI API error' });
    }
    
    const reply = data.choices?.[0]?.message?.content?.trim() || 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi l√∫c n√†y.';
    console.log('ü§ñ AI Response:', reply);
    
    res.json({ reply });
    
  } catch (err) {
    console.error('‚ùå Error:', err);
    res.status(500).json({ error: 'Server error' });
  }
});

module.exports = router;