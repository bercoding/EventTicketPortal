const express = require('express');
const router = express.Router();
const fetch = require('node-fetch');
const Event = require('../models/Event');

const OPENAI_API_KEY = process.env.OPENAI_API_KEY; // ƒê·ªïi t√™n bi·∫øn m√¥i tr∆∞·ªùng cho r√µ r√†ng

// Function ƒë·ªÉ t√¨m ki·∫øm s·ª± ki·ªán t·ª´ database
const searchEvents = async (searchCriteria) => {
  try {
    const query = { status: 'approved' };
    
    // T√¨m ki·∫øm theo t·ª´ kh√≥a
    if (searchCriteria.keywords) {
      query.$or = [
        { title: { $regex: searchCriteria.keywords, $options: 'i' } },
        { description: { $regex: searchCriteria.keywords, $options: 'i' } },
        { tags: { $in: [new RegExp(searchCriteria.keywords, 'i')] } }
      ];
    }
    
    // T√¨m ki·∫øm theo category
    if (searchCriteria.category) {
      query.category = { $in: Array.isArray(searchCriteria.category) ? searchCriteria.category : [searchCriteria.category] };
    }
    
    // T√¨m ki·∫øm theo location
    if (searchCriteria.location) {
      query.$or = query.$or || [];
      query.$or.push(
        { 'location.city': { $regex: searchCriteria.location, $options: 'i' } },
        { 'location.district': { $regex: searchCriteria.location, $options: 'i' } },
        { 'location.address': { $regex: searchCriteria.location, $options: 'i' } }
      );
    }
    
    // L·ªçc s·ª± ki·ªán s·∫Øp di·ªÖn ra
    if (searchCriteria.upcoming) {
      query.startDate = { $gte: new Date() };
    }
    
    // L·ªçc theo featured/trending/special
    if (searchCriteria.featured) query.featured = true;
    if (searchCriteria.trending) query.trending = true;
    if (searchCriteria.special) query.special = true;
    
    const events = await Event.find(query)
      .populate('organizers', 'username fullName avatar')
      .populate('ticketTypes')
      .limit(searchCriteria.limit || 5)
      .sort({ startDate: 1 });
    
    return events;
  } catch (error) {
    console.error('Error searching events:', error);
    return [];
  }
};

// Function ƒë·ªÉ t·∫°o context v·ªÅ s·ª± ki·ªán cho AI
const createEventContext = (events) => {
  if (!events || events.length === 0) {
    return "Hi·ªán t·∫°i kh√¥ng c√≥ s·ª± ki·ªán n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.";
  }
  
  let context = "D∆∞·ªõi ƒë√¢y l√† c√°c s·ª± ki·ªán ph√π h·ª£p:\n\n";
  
  events.forEach((event, index) => {
    const startDate = new Date(event.startDate).toLocaleDateString('vi-VN');
    const ticketTypes = event.ticketTypes?.map(tt => `${tt.name}: ${tt.price?.toLocaleString()}ƒë`) || [];
    
    context += `${index + 1}. **${event.title}**\n`;
    context += `   üìÖ Ng√†y: ${startDate}\n`;
    context += `   üìç ƒê·ªãa ƒëi·ªÉm: ${event.location.venueName || event.location.address || 'Ch∆∞a c·∫≠p nh·∫≠t'}\n`;
    if (event.location.city) context += `   üèôÔ∏è Th√†nh ph·ªë: ${event.location.city}\n`;
    if (event.category && event.category.length > 0) {
      context += `   üè∑Ô∏è Danh m·ª•c: ${event.category.join(', ')}\n`;
    }
    if (ticketTypes.length > 0) {
      context += `   üí∞ Gi√° v√©: ${ticketTypes.join(', ')}\n`;
    }
    if (event.description) {
      context += `   üìù M√¥ t·∫£: ${event.description.substring(0, 100)}${event.description.length > 100 ? '...' : ''}\n`;
    }
    context += `   üîó ID: ${event._id}\n\n`;
  });
  
  return context;
};

router.post('/openai-chat', async (req, res) => {
  const { message } = req.body;
  if (!message) return res.status(400).json({ error: 'Message is required' });
  
  try {
    // Ph√¢n t√≠ch tin nh·∫Øn ƒë·ªÉ t√¨m ki·∫øm s·ª± ki·ªán
    const lowerMessage = message.toLowerCase();
    let searchCriteria = {};
    
    // T√¨m ki·∫øm theo t·ª´ kh√≥a
    if (lowerMessage.includes('s·ª± ki·ªán') || lowerMessage.includes('event') || 
        lowerMessage.includes('concert') || lowerMessage.includes('show') ||
        lowerMessage.includes('festival') || lowerMessage.includes('workshop') ||
        lowerMessage.includes('seminar') || lowerMessage.includes('conference')) {
      
      // Extract keywords t·ª´ tin nh·∫Øn
      const keywords = message.match(/[\w√Ä-·ªπ]+/g)?.filter(word => 
        word.length > 2 && !['c√≥', 'n√†o', 'ƒëang', 's·∫Øp', 'di·ªÖn', 'ra', '·ªü', 't·∫°i', 'cho', 'v·ªõi', 'v√†', 'ho·∫∑c'].includes(word.toLowerCase())
      ).slice(0, 3) || [];
      
      if (keywords.length > 0) {
        searchCriteria.keywords = keywords.join(' ');
      }
      
      // T√¨m ki·∫øm theo location
      const locationKeywords = ['h√† n·ªôi', 'hanoi', 'tp.hcm', 'ho chi minh', 'ƒë√† n·∫µng', 'danang', 'h·∫£i ph√≤ng', 'haiphong'];
      const foundLocation = locationKeywords.find(loc => lowerMessage.includes(loc));
      if (foundLocation) {
        searchCriteria.location = foundLocation;
      }
      
      // T√¨m ki·∫øm theo category
      const categoryKeywords = {
        '√¢m nh·∫°c': 'music',
        'concert': 'music', 
        'nh·∫°c': 'music',
        'th·ªÉ thao': 'sports',
        'football': 'sports',
        'b√≥ng ƒë√°': 'sports',
        'workshop': 'workshop',
        'seminar': 'seminar',
        'conference': 'conference',
        'festival': 'festival'
      };
      
      for (const [keyword, category] of Object.entries(categoryKeywords)) {
        if (lowerMessage.includes(keyword)) {
          searchCriteria.category = category;
          break;
        }
      }
      
      // M·∫∑c ƒë·ªãnh t√¨m s·ª± ki·ªán s·∫Øp di·ªÖn ra
      searchCriteria.upcoming = true;
      searchCriteria.limit = 5;
    }
    
    // T√¨m ki·∫øm s·ª± ki·ªán t·ª´ database
    const events = await searchEvents(searchCriteria);
    const eventContext = createEventContext(events);
    
    // T·∫°o system prompt v·ªõi context s·ª± ki·ªán
    const systemPrompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán chuy√™n v·ªÅ s·ª± ki·ªán. 
    
Khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·ª± ki·ªán, h√£y s·ª≠ d·ª•ng th√¥ng tin s·ª± ki·ªán th·ª±c t·∫ø t·ª´ database:

${eventContext}

H∆∞·ªõng d·∫´n:
1. N·∫øu c√≥ s·ª± ki·ªán ph√π h·ª£p, h√£y gi·ªõi thi·ªáu chi ti·∫øt v√† g·ª£i √Ω ng∆∞·ªùi d√πng tham gia
2. N·∫øu kh√¥ng c√≥ s·ª± ki·ªán ph√π h·ª£p, h√£y g·ª£i √Ω c√°c lo·∫°i s·ª± ki·ªán kh√°c ho·∫∑c th·ªùi gian kh√°c
3. Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch th√¢n thi·ªán v√† h·ªØu √≠ch
4. N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·ª± ki·ªán c·ª• th·ªÉ, h√£y t√¨m ki·∫øm v√† cung c·∫•p th√¥ng tin chi ti·∫øt`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: message }
        ],
        max_tokens: 1000
      })
    });
    const data = await response.json();
    if (!response.ok) {
      console.error('OpenAI API response error:', data);
    }
    const reply = data.choices?.[0]?.message?.content?.trim() || 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi l√∫c n√†y.';
    res.json({ reply });
  } catch (err) {
    console.error('OpenAI API error:', err);
    res.status(500).json({ error: 'OpenAI API error' });
  }
});

module.exports = router;