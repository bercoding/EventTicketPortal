const RefundRequest = require('../models/RefundRequest');
const Booking = require('../models/Booking');
const Event = require('../models/Event');
const User = require('../models/User');
const Ticket = require('../models/Ticket');
const Notification = require('../models/Notification');
const mongoose = require('mongoose');

// T·∫°o y√™u c·∫ßu ho√†n ti·ªÅn v√©
exports.createRefundRequest = async (req, res) => {
  try {
    console.log('üìù POST /api/refunds/requests');
    console.log('üîç REQUEST BODY:', req.body);
    console.log('üîç REQUEST USER:', req.user);
    
    const { bookingId, reason, bankInfo } = req.body;
    const userId = req.user.id;
    
    if (!bookingId) {
      return res.status(400).json({ 
        success: false, 
        message: 'Thi·∫øu th√¥ng tin bookingId' 
      });
    }

    if (!reason) {
      return res.status(400).json({ 
        success: false, 
        message: 'Vui l√≤ng nh·∫≠p l√Ω do tr·∫£ v√©' 
      });
    }

    if (!bankInfo || !bankInfo.bankName || !bankInfo.accountNumber || !bankInfo.accountHolderName) {
      return res.status(400).json({ 
        success: false, 
        message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ng√¢n h√†ng' 
      });
    }
    
    let booking;
    let event;
    let ticketInfo;

    console.log('üîç Looking for ticket/booking with ID:', bookingId);

    try {
      // Ki·ªÉm tra xem bookingId c√≥ th·ªÉ l√† ticketId kh√¥ng
      const isTicketId = await Ticket.findOne({ _id: bookingId, user: userId });
      
      if (isTicketId) {
        console.log('‚úÖ Found ticket:', isTicketId._id);
        // N·∫øu ƒë√¢y l√† ticket ID
        ticketInfo = isTicketId;
        
        // L·∫•y th√¥ng tin event t·ª´ ticket
        event = await Event.findById(ticketInfo.event);
        
        if (!event) {
          return res.status(404).json({
            success: false,
            message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin s·ª± ki·ªán cho v√© n√†y'
          });
        }
        
        console.log('‚úÖ Found event:', event._id, event.title);
        
        // T√¨m booking li√™n quan ƒë·∫øn v√© n√†y - FIX: Kh√¥ng d√πng $elemMatch v√¨ c√≥ th·ªÉ g√¢y l·ªói
        // Thay ƒë·ªïi c√°ch t√¨m booking
        const bookings = await Booking.find({ user: userId });
        booking = bookings.find(b => 
          b.tickets && Array.isArray(b.tickets) && 
          b.tickets.some(t => t.toString() === bookingId.toString())
        );
        
        console.log('üîç Related booking found:', booking ? booking._id : 'Not found');
        
        // N·∫øu kh√¥ng t√¨m th·∫•y booking, t·∫°o m·ªôt booking ·∫£o ƒë·ªÉ x·ª≠ l√Ω
        if (!booking) {
          console.log('‚ö†Ô∏è No booking found, creating virtual booking');
          booking = {
            _id: new mongoose.Types.ObjectId(), // T·∫°o ID m·ªõi cho virtual booking
            user: userId,
            totalAmount: ticketInfo.price,
            status: 'confirmed',
            event: event._id,
            isVirtualBooking: true // ƒê√°nh d·∫•u ƒë√¢y l√† booking ·∫£o
          };
          console.log('üîß Created virtual booking with ID:', booking._id);
        }
      } else {
        // Ki·ªÉm tra theo bookingId truy·ªÅn th·ªëng
        booking = await Booking.findOne({ _id: bookingId, user: userId })
          .populate('event');
        
        if (!booking) {
          return res.status(404).json({ 
            success: false, 
            message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t v√© ho·∫∑c b·∫°n kh√¥ng ph·∫£i ch·ªß s·ªü h·ªØu v√© n√†y' 
          });
        }
        
        event = booking.event;
        console.log('‚úÖ Found booking and event:', booking._id, event._id);
      }

      // Ki·ªÉm tra xem booking c√≥ th·ªÉ ƒë∆∞·ª£c ho√†n ti·ªÅn kh√¥ng
      if (booking.status === 'cancelled' || booking.status === 'refunded' || booking.status === 'refund_requested') {
        return res.status(400).json({ 
          success: false, 
          message: 'ƒê∆°n ƒë·∫∑t v√© ƒë√£ b·ªã h·ªßy ho·∫∑c ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn tr∆∞·ªõc ƒë√≥' 
        });
      }

      // Ki·ªÉm tra n·∫øu s·ª± ki·ªán ƒë√£ di·ªÖn ra
      if (new Date(event.startDate) <= new Date()) {
        return res.status(400).json({
          success: false,
          message: 'Kh√¥ng th·ªÉ tr·∫£ v√© cho s·ª± ki·ªán ƒë√£ di·ªÖn ra'
        });
      }

      // T√≠nh to√°n s·ªë ti·ªÅn ho√†n (75% gi√° tr·ªã ƒë∆°n h√†ng)
      const totalAmount = booking.totalAmount || (ticketInfo ? ticketInfo.price : 0);
      const refundAmount = Math.floor(totalAmount * 0.75);

      console.log('üí∞ Total amount:', totalAmount, 'Refund amount:', refundAmount);
      console.log('üè¶ Bank info:', bankInfo);

      // T·∫°o y√™u c·∫ßu ho√†n ti·ªÅn
      const refundRequestData = {
        user: userId,
        booking: booking._id,
        event: event._id,
        reason,
        amount: totalAmount,
        refundAmount,
        bankInfo: {
          bankName: bankInfo.bankName,
          accountNumber: bankInfo.accountNumber,
          accountHolderName: bankInfo.accountHolderName,
          branch: bankInfo.branch || ''
        },
        status: 'pending'
      };

      console.log('üìù Creating refund request with data:', refundRequestData);
      
      const refundRequest = new RefundRequest(refundRequestData);
      await refundRequest.save();
      
      console.log('‚úÖ Refund request created:', refundRequest._id);

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i booking n·∫øu ƒë√¢y l√† booking th·ª±c
      if (!booking.isVirtualBooking) {
        booking.status = 'refund_requested';
        await booking.save();
        console.log('‚úÖ Updated booking status to refund_requested');
      }
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√© n·∫øu ƒë√¢y l√† ticket ID
      if (ticketInfo) {
        try {
          ticketInfo.status = 'refund_requested';
          await ticketInfo.save();
          console.log('‚úÖ Updated ticket status to refund_requested');
        } catch (ticketError) {
          console.error('‚ùå Error updating ticket status:', ticketError);
          // Kh√¥ng throw error, v√¨ v√© n√†y v·∫´n s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi admin
          // Ghi log l·ªói v√† ti·∫øp t·ª•c
        }
      }

      // Kh√¥ng g·ª≠i th√¥ng b√°o cho admin ƒë·ªÉ tr√°nh l·ªói validation
      // Hi·ªÉn th·ªã y√™u c·∫ßu ho√†n ti·ªÅn trong danh s√°ch cho admin l√† ƒë·ªß

      return res.status(201).json({
        success: true,
        message: 'Y√™u c·∫ßu ho√†n ti·ªÅn ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n v√† ƒëang ch·ªù x·ª≠ l√Ω',
        refundRequest
      });
    } catch (innerError) {
      console.error('‚ùå Error in processing refund request:', innerError);
      return res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu ho√†n ti·ªÅn',
        error: innerError.message,
        stack: innerError.stack
      });
    }
  } catch (error) {
    console.error('‚ùå Error creating refund request:', error);
    return res.status(500).json({
      success: false,
      message: 'C√≥ l·ªói x·∫£y ra khi t·∫°o y√™u c·∫ßu ho√†n ti·ªÅn',
      error: error.message,
      stack: error.stack
    });
  }
};

// L·∫•y danh s√°ch y√™u c·∫ßu ho√†n ti·ªÅn c·ªßa ng∆∞·ªùi d√πng
exports.getUserRefundRequests = async (req, res) => {
  try {
    const userId = req.user.id;
    
    const refundRequests = await RefundRequest.find({ user: userId })
      .populate('booking', 'bookingCode totalAmount')
      .populate('event', 'title startDate images')
      .sort({ createdAt: -1 });
    
    return res.status(200).json({
      success: true,
      refundRequests
    });
  } catch (error) {
    console.error('Error fetching user refund requests:', error);
    return res.status(500).json({
      success: false,
      message: 'C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch y√™u c·∫ßu ho√†n ti·ªÅn',
      error: error.message
    });
  }
};

// [ADMIN] L·∫•y danh s√°ch t·∫•t c·∫£ y√™u c·∫ßu ho√†n ti·ªÅn
exports.getAllRefundRequests = async (req, res) => {
  try {
    const { status, page = 1, limit = 10 } = req.query;
    const query = {};
    
    if (status) {
      query.status = status;
    }
    
    const refundRequests = await RefundRequest.find(query)
      .populate('user', 'username email avatar')
      .populate('booking', 'bookingCode totalAmount createdAt')
      .populate('event', 'title startDate images')
      .sort({ createdAt: -1 })
      .skip((page - 1) * limit)
      .limit(parseInt(limit));
    
    const total = await RefundRequest.countDocuments(query);
    
    return res.status(200).json({
      success: true,
      refundRequests,
      pagination: {
        total,
        page: parseInt(page),
        totalPages: Math.ceil(total / limit)
      }
    });
  } catch (error) {
    console.error('Error fetching all refund requests:', error);
    return res.status(500).json({
      success: false,
      message: 'C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch y√™u c·∫ßu ho√†n ti·ªÅn',
      error: error.message
    });
  }
};

// [ADMIN] X·ª≠ l√Ω y√™u c·∫ßu ho√†n ti·ªÅn
exports.processRefundRequest = async (req, res) => {
  try {
    const { id } = req.params;
    const { status, adminNotes } = req.body;
    const adminId = req.user.id;
    
    if (!['processing', 'completed', 'rejected'].includes(status)) {
      return res.status(400).json({
        success: false,
        message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá'
      });
    }
    
    // T√¨m v√† c·∫≠p nh·∫≠t y√™u c·∫ßu ho√†n ti·ªÅn, populate th√¥ng tin ng∆∞·ªùi d√πng ƒë·ªÉ g·ª≠i email
    const refundRequest = await RefundRequest.findById(id).populate({
      path: 'user',
      select: 'email fullName username'
    }).populate({
      path: 'event',
      select: 'title'
    });
    
    if (!refundRequest) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ho√†n ti·ªÅn'
      });
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i
    refundRequest.status = status;
    refundRequest.adminNotes = adminNotes || refundRequest.adminNotes;
    
    // Chu·∫©n b·ªã email
    const sendEmail = require('../config/email');
    let emailSubject = '';
    let emailContent = '';
    
    if (status === 'completed') {
      refundRequest.completedAt = new Date();
      refundRequest.completedBy = adminId;
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i booking n·∫øu c√≥
      try {
        await Booking.findByIdAndUpdate(refundRequest.booking, {
          status: 'refunded'
        });
      } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i booking:', error);
        // Kh√¥ng d·ª´ng qu√° tr√¨nh, ti·∫øp t·ª•c x·ª≠ l√Ω
      }
      
      // N·ªôi dung email ho√†n ti·ªÅn th√†nh c√¥ng
      emailSubject = `[Event Ticket Portal] Y√™u c·∫ßu ho√†n ti·ªÅn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω`;
      emailContent = `
        <div style="font-family: Arial, sans-serif; padding: 20px; color: #333;">
          <h2 style="color: #4CAF50;">Ho√†n ti·ªÅn th√†nh c√¥ng</h2>
          <p>Xin ch√†o ${refundRequest.user.fullName || refundRequest.user.username},</p>
          <p>Y√™u c·∫ßu ho√†n ti·ªÅn c·ªßa b·∫°n cho s·ª± ki·ªán <strong>${refundRequest.event.title}</strong> ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng.</p>
          <p>S·ªë ti·ªÅn <strong>${refundRequest.refundAmount.toLocaleString('vi-VN')}ƒë</strong> ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v·ªÅ t√†i kho·∫£n c·ªßa b·∫°n.</p>
          <p>Th√¥ng tin t√†i kho·∫£n:</p>
          <ul>
            <li>Ng√¢n h√†ng: ${refundRequest.bankInfo.bankName}</li>
            <li>S·ªë t√†i kho·∫£n: ${refundRequest.bankInfo.accountNumber}</li>
            <li>Ch·ªß t√†i kho·∫£n: ${refundRequest.bankInfo.accountHolderName}</li>
          </ul>
          ${adminNotes ? `<p>Ghi ch√∫: ${adminNotes}</p>` : ''}
          <p>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.</p>
          <p>Tr√¢n tr·ªçng,<br>Event Ticket Portal Team</p>
        </div>
      `;
    } else if (status === 'rejected') {
      refundRequest.rejectedAt = new Date();
      refundRequest.rejectedBy = adminId;
      refundRequest.rejectionReason = req.body.rejectionReason;
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i booking n·∫øu c√≥
      try {
        await Booking.findByIdAndUpdate(refundRequest.booking, {
          status: 'confirmed'
        });
      } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i booking:', error);
        // Kh√¥ng d·ª´ng qu√° tr√¨nh, ti·∫øp t·ª•c x·ª≠ l√Ω
      }
      
      // N·ªôi dung email t·ª´ ch·ªëi ho√†n ti·ªÅn
      emailSubject = `[Event Ticket Portal] Y√™u c·∫ßu ho√†n ti·ªÅn ƒë√£ b·ªã t·ª´ ch·ªëi`;
      emailContent = `
        <div style="font-family: Arial, sans-serif; padding: 20px; color: #333;">
          <h2 style="color: #F44336;">Y√™u c·∫ßu ho√†n ti·ªÅn b·ªã t·ª´ ch·ªëi</h2>
          <p>Xin ch√†o ${refundRequest.user.fullName || refundRequest.user.username},</p>
          <p>Y√™u c·∫ßu ho√†n ti·ªÅn c·ªßa b·∫°n cho s·ª± ki·ªán <strong>${refundRequest.event.title}</strong> ƒë√£ b·ªã t·ª´ ch·ªëi.</p>
          <p><strong>L√Ω do t·ª´ ch·ªëi:</strong> ${req.body.rejectionReason || 'Kh√¥ng ƒë√°p ·ª©ng ƒëi·ªÅu ki·ªán ho√†n ti·ªÅn'}</p>
          ${adminNotes ? `<p>Ghi ch√∫: ${adminNotes}</p>` : ''}
          <p>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c gi·∫£i ƒë√°p.</p>
          <p>Tr√¢n tr·ªçng,<br>Event Ticket Portal Team</p>
        </div>
      `;
    } else if (status === 'processing') {
      // N·ªôi dung email ƒëang x·ª≠ l√Ω ho√†n ti·ªÅn
      emailSubject = `[Event Ticket Portal] Y√™u c·∫ßu ho√†n ti·ªÅn ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω`;
      emailContent = `
        <div style="font-family: Arial, sans-serif; padding: 20px; color: #333;">
          <h2 style="color: #2196F3;">Y√™u c·∫ßu ho√†n ti·ªÅn ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω</h2>
          <p>Xin ch√†o ${refundRequest.user.fullName || refundRequest.user.username},</p>
          <p>Y√™u c·∫ßu ho√†n ti·ªÅn c·ªßa b·∫°n cho s·ª± ki·ªán <strong>${refundRequest.event.title}</strong> hi·ªán ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.</p>
          <p>Ch√∫ng t√¥i s·∫Ω th√¥ng b√°o cho b·∫°n ngay sau khi qu√° tr√¨nh ho√†n ti·ªÅn ho√†n t·∫•t.</p>
          ${adminNotes ? `<p>Ghi ch√∫: ${adminNotes}</p>` : ''}
          <p>Tr√¢n tr·ªçng,<br>Event Ticket Portal Team</p>
        </div>
      `;
    }
    
    await refundRequest.save();
    
    // G·ª≠i email th√¥ng b√°o cho kh√°ch h√†ng
    try {
      if (refundRequest.user && refundRequest.user.email) {
        await sendEmail({
          email: refundRequest.user.email,
          subject: emailSubject,
          message: emailContent
        });
        console.log(`‚úÖ ƒê√£ g·ª≠i email th√¥ng b√°o tr·∫°ng th√°i ho√†n ti·ªÅn "${status}" cho ${refundRequest.user.email}`);
      }
    } catch (emailError) {
      console.error('‚ùå L·ªói g·ª≠i email:', emailError);
      // Kh√¥ng d·ª´ng qu√° tr√¨nh x·ª≠ l√Ω n·∫øu g·ª≠i email th·∫•t b·∫°i
    }
    
    return res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u c·∫ßu ho√†n ti·ªÅn th√†nh c√¥ng',
      refundRequest
    });
  } catch (error) {
    console.error('Error processing refund request:', error);
    return res.status(500).json({
      success: false,
      message: 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu ho√†n ti·ªÅn',
      error: error.message
    });
  }
}; 