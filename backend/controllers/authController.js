// backend/controllers/authController.js
const User = require('../models/User');
const Otp = require('../models/Otp');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const crypto = require('crypto');
const sendEmail = require('../config/email');

// T·∫°o token JWT
const generateToken = (id) => {
    console.log(`Generating token for user ID: ${id}`);
    // TƒÉng th·ªùi gian h·∫øt h·∫°n l√™n 7 ng√†y ƒë·ªÉ tr√°nh logout qu√° nhanh
    const token = jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: '7d' });
    console.log(`Token generated with expiry: 7 days`);
    return token;
};

// T·∫°o OTP
const generateOTP = () => {
    return Math.floor(100000 + Math.random() * 900000).toString();
};

// ƒêƒÉng k√Ω
exports.register = async (req, res) => {
    const { username, email, password, fullName } = req.body;
    
    try {
        // Ki·ªÉm tra user ƒë√£ t·ªìn t·∫°i
        const userExists = await User.findOne({ $or: [{ email }, { username }] });
        
        if (userExists) {
            return res.status(400).json({ 
                success: false,
                message: 'Email ho·∫∑c t√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i' 
            });
        }

        // Hash password tr∆∞·ªõc khi l∆∞u v√†o OTP record
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        // T·∫°o OTP
        const otpCode = generateOTP();
        const otpExpiry = new Date(Date.now() + 10 * 60 * 1000); // 10 ph√∫t

        // L∆∞u OTP v√† th√¥ng tin ƒëƒÉng k√Ω v√†o database
        const otpRecord = await Otp.create({
            email,
            username,
            otpCode,
            expiresAt: otpExpiry,
            userData: {       // L∆∞u th√¥ng tin user ƒë·ªÉ t·∫°o sau khi x√°c th·ª±c
                fullName,
                email, 
                username,
                password: hashedPassword
            }
        });

        // G·ª≠i email OTP
        const emailContent = `
            <h2>X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n</h2>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i Event Ticket Portal.</p>
            <p>M√£ OTP c·ªßa b·∫°n l√†: <strong>${otpCode}</strong></p>
            <p>M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 10 ph√∫t.</p>
            <p>Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.</p>
        `;

        await sendEmail({
            email,
            subject: 'X√°c th·ª±c t√†i kho·∫£n Event Ticket Portal',
            message: emailContent
        });
        
        res.status(201).json({
            success: true,
            message: 'ƒêƒÉng k√Ω th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ l·∫•y m√£ OTP.',
            email: email // Tr·∫£ v·ªÅ email ƒë·ªÉ s·ª≠ d·ª•ng khi x√°c th·ª±c OTP
        });
    } catch (error) {
        console.error('Error during registration:', error);
        res.status(400).json({ 
            success: false,
            message: 'ƒêƒÉng k√Ω th·∫•t b·∫°i',
            error: error.message 
        });
    }
};

// X√°c th·ª±c OTP
exports.verifyOTP = async (req, res) => {
    const { email, otp } = req.body;

    try {
        // T√¨m OTP m·ªõi nh·∫•t v√† ch∆∞a x√°c th·ª±c c·ªßa email
        const otpRecord = await Otp.findOne({
            email,
            otpCode: otp,
            isVerified: false,
            expiresAt: { $gt: Date.now() }
        }).sort({ createdAt: -1 });

        if (!otpRecord) {
            return res.status(400).json({
                success: false,
                message: 'M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n'
            });
        }

        // T·∫°o user m·ªõi t·ª´ th√¥ng tin ƒë√£ l∆∞u trong OTP record
        const userData = otpRecord.userData;
        
        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c t·∫°o ch∆∞a
        let user = await User.findOne({ email: otpRecord.email });
        
        if (!user) {
            // T·∫°o user m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
            user = await User.create({
                username: userData.username,
                email: userData.email,
                password: userData.password, // ƒê√£ ƒë∆∞·ª£c hash t·ª´ tr∆∞·ªõc
                fullName: userData.fullName,
                status: 'active',
                isVerified: true
            });
        } else {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i n·∫øu user ƒë√£ t·ªìn t·∫°i
            user.status = 'active';
            user.isVerified = true;
            await user.save();
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i OTP
        otpRecord.isVerified = true;
        await otpRecord.save();

        // T·∫°o token v√† tr·∫£ v·ªÅ th√¥ng tin user
        const token = generateToken(user._id);

        res.status(200).json({
            success: true,
            message: 'X√°c th·ª±c th√†nh c√¥ng',
            token,
            user: {
                id: user._id,
                username: user.username,
                email: user.email,
                fullName: user.fullName,
                role: user.role
            }
        });
    } catch (error) {
        res.status(400).json({
            success: false,
            message: 'X√°c th·ª±c th·∫•t b·∫°i',
            error: error.message
        });
    }
};

// G·ª≠i l·∫°i OTP
exports.resendOTP = async (req, res) => {
    const { email } = req.body;

    try {
        // T√¨m OTP g·∫ßn nh·∫•t cho email n√†y
        const lastOtp = await Otp.findOne({ 
            email,
            isVerified: false
        }).sort({ createdAt: -1 });

        if (!lastOtp) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒëƒÉng k√Ω c·∫ßn x√°c th·ª±c'
            });
        }

        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ OTP tr∆∞·ªõc ƒë√≥
        const userData = lastOtp.userData;

        // T·∫°o OTP m·ªõi
        const otpCode = generateOTP();
        const otpExpiry = new Date(Date.now() + 10 * 60 * 1000); // 10 ph√∫t

        // X√≥a OTP c≈© v√† t·∫°o m·ªõi
        await Otp.deleteMany({ email, isVerified: false });
        await Otp.create({
            email,
            username: lastOtp.username,
            otpCode,
            expiresAt: otpExpiry,
            userData: userData // Gi·ªØ l·∫°i th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω
        });

        // G·ª≠i email OTP
        const emailContent = `
            <h2>X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n</h2>
            <p>M√£ OTP m·ªõi c·ªßa b·∫°n l√†: <strong>${otpCode}</strong></p>
            <p>M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 10 ph√∫t.</p>
            <p>Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.</p>
        `;

        await sendEmail({
            email,
            subject: 'M√£ OTP m·ªõi - Event Ticket Portal',
            message: emailContent
        });

        res.status(200).json({
            success: true,
            message: 'M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n'
        });
    } catch (error) {
        res.status(400).json({
            success: false,
            message: 'Kh√¥ng th·ªÉ g·ª≠i l·∫°i m√£ OTP',
            error: error.message
        });
    }
};

// ƒêƒÉng nh·∫≠p
exports.login = async (req, res) => {
    const { email, password } = req.body;
    
    try {
        console.log('üîê Login attempt for email:', email);
        
        // Ki·ªÉm tra email v√† password
        if (!email || !password) {
            console.log('‚ùå Missing email or password');
            return res.status(400).json({ 
                success: false,
                message: 'Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u' 
            });
        }
        
        // T√¨m user
        const user = await User.findOne({ email });
        
        if (!user) {
            console.log('‚ùå User not found for email:', email);
            return res.status(401).json({ 
                success: false,
                message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng' 
            });
        }

        console.log('üë§ Found user:', user.email, 'ID:', user._id);

        // Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n
        if (user.status === 'pending') {
            console.log('‚è≥ User account pending verification:', user.email);
            return res.status(403).json({
                success: false,
                message: 'T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c.'
            });
        }
        
        // Ki·ªÉm tra user c√≥ b·ªã ban kh√¥ng
        if (user.isBanned) {
            console.log('üö´ User is banned:', user.email);
            return res.status(403).json({ 
                success: false,
                message: 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a',
                banned: true,
                banReason: user.banReason || 'Vi ph·∫°m ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng'
            });
        }
        
        // Ki·ªÉm tra m·∫≠t kh·∫©u
        const isMatch = await bcrypt.compare(password, user.password);
        
        if (!isMatch) {
            console.log('‚ùå Password mismatch for user:', user.email);
            return res.status(401).json({ 
                success: false,
                message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng' 
            });
        }
        
        // C·∫≠p nh·∫≠t th·ªùi gian ƒëƒÉng nh·∫≠p
        user.lastLoginAt = Date.now();
        await user.save();
        
        // T·∫°o token
        const token = generateToken(user._id);
        
        console.log('‚úÖ Login successful for user:', user.email, 'ID:', user._id);
        console.log('üîë Generated token for user ID:', user._id);
        
        // Prepare user data to return (exclude sensitive fields)
        const userData = {
            id: user._id,
            username: user.username,
            email: user.email,
            role: user.role,
            avatar: user.avatar,
            ownerRequestStatus: user.ownerRequestStatus,
            fullName: user.fullName
        };
        
        console.log('üì§ Returning user data:', userData);
        
        res.status(200).json({
            success: true,
            token,
            user: userData
        });
    } catch (error) {
        console.error('‚ùå Login error:', error);
        res.status(400).json({ 
            success: false,
            message: 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i',
            error: error.message 
        });
    }
};

// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
exports.getMe = async (req, res) => {
    try {
        console.log('üîç getMe called for user ID:', req.user?.id);
        
        if (!req.user || !req.user.id) {
            console.log('‚ùå getMe: No user in request');
            return res.status(401).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin x√°c th·ª±c'
            });
        }
        
        const user = await User.findById(req.user.id).select('-password');
        
        if (!user) {
            console.log('‚ùå getMe: User not found in database for ID:', req.user.id);
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng'
            });
        }

        console.log('‚úÖ getMe: User found:', user.email);
        res.status(200).json({
            success: true,
            data: user
        });
    } catch (error) {
        console.error('‚ùå getMe error:', error);
        res.status(400).json({ 
            success: false,
            message: 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng',
            error: error.message 
        });
    }
};

// Qu√™n m·∫≠t kh·∫©u - G·ª≠i OTP
exports.forgotPassword = async (req, res) => {
    const { email } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ 
                success: false,
                message: 'Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng' 
            });
        }

        // T·∫°o OTP 6 s·ªë
        const otpCode = generateOTP();
        
        // L∆∞u OTP v√†o user (ho·∫∑c c√≥ th·ªÉ d√πng OTP model ri√™ng)
        user.resetPasswordOTP = otpCode;
        user.resetPasswordOTPExpires = Date.now() + 10 * 60 * 1000; // 10 ph√∫t

        await user.save();

        // G·ª≠i email v·ªõi OTP
        const message = `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9; border-radius: 10px;">
                <div style="background-color: #ffffff; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                    <h2 style="color: #333; text-align: center; margin-bottom: 30px;">üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
                    
                    <p style="color: #555; font-size: 16px; line-height: 1.6;">Xin ch√†o <strong>${user.fullName || user.username}</strong>,</p>
                    
                    <p style="color: #555; font-size: 16px; line-height: 1.6;">
                        B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n Event Ticket Portal. 
                        Vui l√≤ng s·ª≠ d·ª•ng m√£ OTP sau ƒë·ªÉ x√°c nh·∫≠n:
                    </p>
                    
                    <div style="text-align: center; margin: 30px 0;">
                        <div style="background-color: #007bff; color: white; font-size: 32px; font-weight: bold; padding: 20px; border-radius: 8px; letter-spacing: 8px; display: inline-block;">
                            ${otpCode}
                        </div>
                    </div>
                    
                    <p style="color: #555; font-size: 16px; line-height: 1.6;">
                        <strong>L∆∞u √Ω quan tr·ªçng:</strong>
                    </p>
                    <ul style="color: #555; font-size: 14px; line-height: 1.6;">
                        <li>M√£ OTP n√†y c√≥ hi·ªáu l·ª±c trong <strong>10 ph√∫t</strong></li>
                        <li>Kh√¥ng chia s·∫ª m√£ OTP v·ªõi b·∫•t k·ª≥ ai</li>
                        <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y</li>
                    </ul>
                    
                    <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
                    
                    <p style="color: #999; font-size: 12px; text-align: center;">
                        Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª´ Event Ticket Portal<br>
                        N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá h·ªó tr·ª£
                    </p>
                </div>
            </div>
        `;

        try {
            await sendEmail({
                email: user.email,
                subject: 'üîê M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - Event Ticket Portal',
                message
            });

            console.log(`üìß OTP sent to ${email}: ${otpCode}`); // Log ƒë·ªÉ debug

            res.status(200).json({ 
                success: true, 
                message: 'M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n',
                // Trong development c√≥ th·ªÉ tr·∫£ v·ªÅ OTP ƒë·ªÉ test
                ...(process.env.NODE_ENV === 'development' && { otp: otpCode })
            });
        } catch (error) {
            user.resetPasswordOTP = undefined;
            user.resetPasswordOTPExpires = undefined;
            await user.save();

            console.error('Email sending error:', error);

            return res.status(500).json({ 
                success: false,
                message: 'Kh√¥ng th·ªÉ g·ª≠i email OTP' 
            });
        }
    } catch (error) {
        console.error('Forgot password error:', error);
        res.status(500).json({ 
            success: false,
            message: 'L·ªói qu√™n m·∫≠t kh·∫©u',
            error: error.message 
        });
    }
};

// X√°c th·ª±c OTP
exports.verifyResetOTP = async (req, res) => {
    const { email, otp } = req.body;

    try {
        // T√¨m user v·ªõi OTP h·ª£p l·ªá
        const user = await User.findOne({
            email,
            resetPasswordOTP: otp,
            resetPasswordOTPExpires: { $gt: Date.now() }
        });

        if (!user) {
            return res.status(400).json({ 
                success: false,
                message: 'M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' 
            });
        }

        res.status(200).json({ 
            success: true, 
            message: 'OTP h·ª£p l·ªá. B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.',
            data: { email }
        });
    } catch (error) {
        res.status(500).json({ 
            success: false,
            message: 'L·ªói x√°c th·ª±c OTP',
            error: error.message 
        });
    }
};

// ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u v·ªõi OTP
exports.resetPasswordWithOTP = async (req, res) => {
    const { email, otp, password } = req.body;

    try {
        // T√¨m user v·ªõi OTP h·ª£p l·ªá
        const user = await User.findOne({
            email,
            resetPasswordOTP: otp,
            resetPasswordOTPExpires: { $gt: Date.now() }
        });

        if (!user) {
            return res.status(400).json({ 
                success: false,
                message: 'M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' 
            });
        }

        // ƒê·∫∑t m·∫≠t kh·∫©u m·ªõi (s·∫Ω ƒë∆∞·ª£c hash t·ª± ƒë·ªông b·ªüi User schema middleware)
        user.password = password;
        user.resetPasswordOTP = undefined;
        user.resetPasswordOTPExpires = undefined;
        await user.save();

        console.log(`‚úÖ Password reset successfully for ${email}`);

        res.status(200).json({ 
            success: true, 
            message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng' 
        });
    } catch (error) {
        console.error('Reset password error:', error);
        res.status(500).json({ 
            success: false,
            message: 'L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u',
            error: error.message 
        });
    }
};

// ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u (legacy - v·ªõi token)
exports.resetPassword = async (req, res) => {
    const { token, password } = req.body;

    try {
        // Hash token
        const resetPasswordToken = crypto
            .createHash('sha256')
            .update(token)
            .digest('hex');

        // T√¨m user v·ªõi token h·ª£p l·ªá
        const user = await User.findOne({
            resetPasswordToken,
            resetPasswordExpires: { $gt: Date.now() }
        });

        if (!user) {
            return res.status(400).json({ 
                success: false,
                message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' 
            });
        }

        // Hash m·∫≠t kh·∫©u m·ªõi
        const salt = await bcrypt.genSalt(10);
        user.password = await bcrypt.hash(password, salt);
        user.resetPasswordToken = undefined;
        user.resetPasswordExpires = undefined;
        await user.save();

        res.status(200).json({ 
            success: true, 
            message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng' 
        });
    } catch (error) {
        res.status(500).json({ 
            success: false,
            message: 'L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u',
            error: error.message 
        });
    }
};