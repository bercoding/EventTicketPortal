import React, { useState, useEffect, useRef } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import axios from 'axios';
import { toast } from 'react-toastify';
import ImageUpload from '../../components/event/ImageUpload';
import SeatingPreview from '../../components/seating/SeatingPreview';
import InteractiveSeatingDesigner from '../../components/seating/InteractiveSeatingDesigner';
import './CreateEvent.css';
import { uploadImage } from '../../services/api';

// Thêm styles inline để đảm bảo form hiển thị đúng
const styles = {
  container: {
    padding: '20px',
    maxWidth: '1200px',
    margin: '0 auto',
    backgroundColor: '#fff',
    borderRadius: '8px',
    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
  },
  header: {
    marginBottom: '20px',
    textAlign: 'center'
  },
  formSection: {
    marginBottom: '30px',
    padding: '20px',
    backgroundColor: '#f9fafb',
    borderRadius: '8px'
  },
  formGroup: {
    marginBottom: '15px'
  },
  label: {
    display: 'block',
    marginBottom: '5px',
    fontWeight: '500'
  },
  input: {
    width: '100%',
    padding: '10px',
    border: '1px solid #d1d5db',
    borderRadius: '4px',
    fontSize: '16px'
  },
  button: {
    padding: '10px 20px',
    backgroundColor: '#3b82f6',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '16px'
  },
  stepActions: {
    display: 'flex',
    justifyContent: 'space-between',
    marginTop: '20px'
  }
};

// Venue templates với layout thông minh
const VENUE_TEMPLATES = {
  stadium: {
    name: 'Sân vận động',
    description: '3 khu VIP phía trước, các khu khác xung quanh',
    defaultSections: 8,
    defaultSeats: 300,
    layoutType: 'stadium',
    ticketTypeTemplates: [
      { name: 'VIP Tier 1', price: 800000, description: 'Hàng ghế đầu, view tốt nhất', percentage: 15, color: '#8B5CF6' },
      { name: 'VIP Tier 2', price: 600000, description: 'Khu VIP phía sau', percentage: 20, color: '#3B82F6' },
      { name: 'Thường A', price: 400000, description: 'Khu khán đài chính', percentage: 35, color: '#10B981' },
      { name: 'Thường B', price: 250000, description: 'Khu khán đài phụ', percentage: 30, color: '#F97316' }
    ],
    stageSize: { width: 200, height: 60 }
  },
  theater: {
    name: 'Nhà hát / Hội trường',
    description: 'Layout truyền thống với ghế sắp xếp theo hàng',
    defaultSections: 6,
    defaultSeats: 200,
    layoutType: 'theater',
    ticketTypeTemplates: [
      { name: 'VIP', price: 500000, description: 'Ghế hạng sang phía trước', percentage: 30, color: '#8B5CF6' },
      { name: 'Thường', price: 300000, description: 'Ghế thông thường', percentage: 70, color: '#3B82F6' }
    ],
    stageSize: { width: 200, height: 60 }
  },
  concert: {
    name: 'Concert Hall',
    description: 'Sân khấu trung tâm với khu VIP gần sân khấu',
    defaultSections: 10,
    defaultSeats: 500,
    layoutType: 'concert',
    ticketTypeTemplates: [
      { name: 'Golden Circle', price: 1500000, description: 'Gần sân khấu nhất', percentage: 10, color: '#F59E0B' },
      { name: 'VIP', price: 800000, description: 'Khu VIP với dịch vụ đặc biệt', percentage: 20, color: '#8B5CF6' },
      { name: 'Thường A', price: 500000, description: 'Khu khán đài chính', percentage: 40, color: '#3B82F6' },
      { name: 'Thường B', price: 300000, description: 'Khu khán đài xa', percentage: 30, color: '#10B981' }
    ],
    stageSize: { width: 200, height: 60 }
  },
  outdoor: {
    name: 'Sự kiện ngoài trời',
    description: 'Không gian mở với các khu vực linh hoạt',
    defaultSections: 5,
    defaultSeats: 150,
    layoutType: 'outdoor',
    ticketTypeTemplates: [
      { name: 'VIP Front', price: 600000, description: 'Khu vực phía trước', percentage: 25, color: '#8B5CF6' },
      { name: 'General', price: 350000, description: 'Khu vực chung', percentage: 75, color: '#3B82F6' }
    ],
    stageSize: { width: 200, height: 60 }
  },
  footballStadium: {
    name: 'Sân vận động bóng đá',
    description: 'Layout sân bóng chuyên nghiệp với VIP tầng trên, khán đài chính và khu góc',
    defaultSections: 12,
    defaultSeats: 1000,
    layoutType: 'footballStadium',
    ticketTypeTemplates: [
      { name: 'VIP Box', price: 2500000, description: 'Hộp VIP tầng trên (DB1, DB2, DC1, DC2)', percentage: 20, color: '#DC2626' },
      { name: 'Premium', price: 1500000, description: 'Khán đài cao cấp gần sân (DA1, DA2)', percentage: 20, color: '#7C3AED' },
      { name: 'Khán đài Chính', price: 1000000, description: 'Khán đài chính hai bên (DA3, DA4)', percentage: 30, color: '#2563EB' },
      { name: 'Khán đài Góc', price: 700000, description: 'Khu vực góc sân (KD_A, KD_B, KD_C)', percentage: 20, color: '#059669' },
      { name: 'FOH', price: 400000, description: 'Khu vực FOH và các khu xa', percentage: 10, color: '#D97706' }
    ],
    stageSize: { width: 400, height: 200 }
  },
  basketballArena: {
    name: 'Sân bóng rổ',
    description: 'Arena bóng rổ với khán đài bao quanh sân',
    defaultSections: 8,
    defaultSeats: 600,
    layoutType: 'basketballArena',
    ticketTypeTemplates: [
      { name: 'Courtside', price: 1500000, description: 'Ghế sát sân với trải nghiệm tốt nhất', percentage: 10, color: '#DC2626' },
      { name: 'Lower Bowl', price: 800000, description: 'Tầng dưới gần sân', percentage: 30, color: '#7C3AED' },
      { name: 'Club Level', price: 600000, description: 'Tầng club với tiện ích', percentage: 25, color: '#2563EB' },
      { name: 'Upper Bowl', price: 350000, description: 'Tầng trên với giá hợp lý', percentage: 35, color: '#059669' }
    ],
    stageSize: { width: 350, height: 180 }
  }
};

// Define constants for seating layout
const CANVAS_WIDTH = 1200;
const CANVAS_HEIGHT = 1000;

// Stage dimensions based on venue type
const STAGE_DIMENSIONS = {
  footballStadium: { width: 320, height: 220, x: 440, y: 50 }, // Sân bóng đá - lớn nhất
  basketballArena: { width: 280, height: 180, x: 460, y: 70 }, // Sân bóng rổ - trung bình
  theater: { width: 240, height: 80, x: 480, y: 50 }, // Nhà hát - nhỏ, rộng
  concert: { width: 220, height: 80, x: 490, y: 50 }, // Concert - nhỏ, rộng
  conference: { width: 200, height: 60, x: 500, y: 50 }, // Hội nghị - nhỏ nhất
  outdoor: { width: 250, height: 80, x: 475, y: 50 }, // Ngoài trời - trung bình
  custom: { width: 200, height: 60, x: 500, y: 50 }, // Tùy chỉnh - mặc định
};

// Create initial stage based on venue type
const getInitialStage = (venueType) => {
  const dimensions = STAGE_DIMENSIONS[venueType] || STAGE_DIMENSIONS.custom;
  return {
    ...dimensions,
    type: venueType === 'footballStadium' ? 'footballField' : 
          venueType === 'basketballArena' ? 'basketballCourt' : 'stage'
  };
};

// Thêm danh sách các loại vật thể phụ trợ
const VENUE_OBJECT_TYPES = [
  { value: 'wc', label: 'Nhà vệ sinh', color: '#3B82F6' },
  { value: 'entrance', label: 'Lối vào', color: '#10B981' },
  { value: 'exit', label: 'Lối ra', color: '#EF4444' },
  { value: 'bar', label: 'Quầy nước', color: '#F59E0B' },
  { value: 'food', label: 'Quầy thức ăn', color: '#8B5CF6' },
  { value: 'info', label: 'Quầy thông tin', color: '#06B6D4' },
  { value: 'merch', label: 'Quầy bán hàng lưu niệm', color: '#F472B6' },
  { value: 'medical', label: 'Trạm y tế', color: '#DC2626' },
  { value: 'security', label: 'Bảo vệ', color: '#4B5563' },
  { value: 'elevator', label: 'Thang máy', color: '#6366F1' },
  { value: 'stairs', label: 'Cầu thang', color: '#9333EA' },
  { value: 'vip', label: 'Khu vực VIP', color: '#FFD700' },
  { value: 'photo', label: 'Điểm chụp ảnh', color: '#14B8A6' },
  { value: 'charging', label: 'Trạm sạc', color: '#F97316' }
];

// Hàm tạo màu ngẫu nhiên cho các loại vé
const getRandomColor = () => {
  const colors = [
    '#3B82F6', // Blue
    '#8B5CF6', // Purple
    '#10B981', // Green
    '#F59E0B', // Orange
    '#EF4444', // Red
    '#06B6D4', // Cyan
    '#84CC16', // Lime
    '#F472B6', // Pink
    '#6366F1', // Indigo
    '#EC4899', // Pink
    '#14B8A6', // Teal
    '#9333EA'  // Purple
  ];
  
  return colors[Math.floor(Math.random() * colors.length)];
};

const CreateEventWithSeating = () => {
  console.log("Rendering CreateEventWithSeating component...");
  const navigate = useNavigate();
  const location = useLocation();
  const initialEventData = location.state?.eventData || {
    title: '',
    description: '',
    startDate: '',
    endDate: '',
    location: {
      venueName: '',
      address: ''
    },
    images: {
      logo: '',
      banner: ''
    }
  };
  
  const [eventData, setEventData] = useState(initialEventData);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [currentStep, setCurrentStep] = useState(1);
  const [designMode, setDesignMode] = useState('custom'); // Luôn là 'custom'
  const [customSeatingMap, setCustomSeatingMap] = useState({
    layoutType: 'custom',
    sections: [],
    stage: { x: 400, y: 50, width: 200, height: 60 },
    venueObjects: [] // Ensure venue objects array is initialized
  });
  const [isEditingTicketTypesManually, setIsEditingTicketTypesManually] = useState(false);
  
  const [seatOptions, setSeatOptions] = useState({
    venueType: 'custom',
    hasSeatingChart: true,
    ticketTypes: [
      { name: 'Standard', price: 0, color: '#3B82F6' }
    ]
  });

  const [ticketTypes, setTicketTypes] = useState([
    {
      name: 'VIP',
      price: 500000,
      description: 'Vé hạng VIP với vị trí tốt nhất',
      quantity: 60,
      color: '#8B5CF6'
    },
    {
      name: 'Thường',
      price: 300000,
      description: 'Vé thường với giá hợp lý',
      quantity: 140,
      color: '#3B82F6'
    }
  ]);

  // Initialize venue objects if they don't exist (with proper dependencies)
  useEffect(() => {
    if (!customSeatingMap.venueObjects) {
      console.log('🏗️ Initializing venue objects array');
      setCustomSeatingMap(prev => ({
        ...prev,
        venueObjects: []
      }));
    }
  }, []); // Run only once on component mount

  // Smart seat distribution when changing total seats - preserve colors
  const handleSeatChange = (newTotalSeats) => {
    if (seatOptions.venueType) {
      const template = VENUE_TEMPLATES[seatOptions.venueType];
      const updatedTicketTypes = ticketTypes.map(tt => {
        const templateTT = template.ticketTypeTemplates.find(t => t.name === tt.name);
        const percentage = templateTT ? templateTT.percentage : (tt.quantity / seatOptions.totalSeats * 100);
        return {
          ...tt,
          quantity: Math.floor(newTotalSeats * percentage / 100),
          color: tt.color || templateTT?.color || '#6B7280' // Preserve existing color
        };
      });
      setTicketTypes(updatedTicketTypes);
    }
    
    setSeatOptions(prev => ({ ...prev, totalSeats: parseInt(newTotalSeats) }));
    generatePreviewMap(newTotalSeats, seatOptions.totalSections, seatOptions.venueType);
  };

  // Generate preview seating map
  const generatePreviewMap = async (
    totalSeats = seatOptions.totalSeats, 
    totalSections = seatOptions.totalSections, 
    venueType = seatOptions.venueType,
    stageSize
  ) => {
    try {
      console.log('🔄 Generating preview...', { totalSeats, totalSections, venueType, stageSize });
      
      const response = await axios.post('https://eventbackendacr-c4dhdsbhfug2hkb2.australiacentral-01.azurewebsites.net///events/preview-seating', {
        seatOptions: { totalSeats, totalSections, venueType },
        ticketTypes: ticketTypes.map(tt => ({ ...tt, _id: `temp_${tt.name}` }))
      }, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      if (response.data.success) {
        console.log('✅ Preview generated successfully');
        setCustomSeatingMap(response.data.data);
      }
    } catch (error) {
      console.error('❌ Error generating preview:', error);
      
      // Better fallback with mock sections
      const mockSections = [];
      const seatsPerSection = Math.floor(totalSeats / totalSections);
      
      for (let i = 0; i < Math.min(totalSections, 3); i++) {
        mockSections.push({
          name: `Khu ${String.fromCharCode(65 + i)}`,
          capacity: seatsPerSection,
          x: 100 + i * 200,
          y: 200 + i * 50,
          width: 150,
          height: 100,
          rows: [{
            rowNumber: 1,
            rowLetter: 'A',
            seats: Array.from({ length: Math.min(seatsPerSection, 10) }, (_, j) => ({
              seatNumber: j + 1,
              x: 100 + i * 200 + j * 15,
              y: 200 + i * 50,
              status: 'available'
            }))
          }]
        });
      }
      
      // Kích thước stage tùy chỉnh theo loại sân
      const defaultStageSize = {
        width: venueType === 'footballStadium' ? 400 :
               venueType === 'basketballArena' ? 350 :
               200,
        height: venueType === 'footballStadium' ? 200 :
                venueType === 'basketballArena' ? 180 :
                60
      };
      
      const stageDimensions = stageSize || defaultStageSize;
      
      setCustomSeatingMap({
        layoutType: venueType,
        sections: mockSections,
        stage: { 
          x: 400 - (stageDimensions.width / 2), // Căn giữa theo chiều ngang
          y: 20, 
          width: stageDimensions.width, 
          height: stageDimensions.height 
        }
      });
    }
  };

  const handleImageUpload = async (e, imageType) => {
    const file = e.target.files[0];
    if (file) {
      try {
        console.log(`🖼️ Bắt đầu upload hình ảnh ${imageType}...`);
        // Upload to server using helper function
        const result = await uploadImage(file, imageType);
        
        if (result.success) {
          console.log(`✅ Upload ${imageType} thành công:`, result.url);
          // Hiển thị toast thành công thay vì alert
          toast.success(`Upload ${imageType} thành công!`, {
            position: "top-right",
            autoClose: 3000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
          });
          
          // Cập nhật state với URL hình ảnh đã upload
          setEventData(prevState => {
            console.log(`🔄 Cập nhật state.images.${imageType} với URL:`, result.url);
            return {
              ...prevState,
              images: {
                ...prevState.images,
                [imageType]: result.url
              }
            };
          });
          
          return result.url;
        } else {
          console.error(`❌ Lỗi upload ${imageType}:`, result.message);
          // Hiển thị toast lỗi thay vì alert
          toast.error(`Lỗi upload ${imageType}: ${result.message}`, {
            position: "top-right",
            autoClose: 5000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
          });
        }
      } catch (error) {
        console.error('Upload error:', error);
        if (error.response?.status === 401) {
          // Hiển thị toast lỗi xác thực
          toast.error(`Lỗi xác thực, vui lòng đăng nhập lại để upload ${imageType}`, {
            position: "top-right",
            autoClose: 5000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
          });
        } else {
          // Hiển thị toast lỗi khác
          toast.error(`Lỗi upload ${imageType}: ${error.message}`, {
            position: "top-right",
            autoClose: 5000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
          });
        }
      }
    }
    return null;
  };

  const handleSeatOptionsChange = (e) => {
    const { name, value } = e.target;
    if (name === 'totalSeats') {
      handleSeatChange(value);
    } else {
      const newSeatOptions = { ...seatOptions, [name]: parseInt(value) };
      setSeatOptions(newSeatOptions);
      // Generate preview khi thay đổi venueType hoặc totalSections
      setTimeout(() => {
        generatePreviewMap(newSeatOptions.totalSeats, newSeatOptions.totalSections, newSeatOptions.venueType);
      }, 300);
    }
  };

  const handleTicketTypeChange = (index, field, value) => {
    // Mark as manually editing when user changes ticket types
    console.log(`🎛️ User manually changed ticket type [${index}].${field} = ${value}`);
    console.log(`🎛️ Before: isEditingTicketTypesManually = ${isEditingTicketTypesManually}`);
    setIsEditingTicketTypesManually(true);
    console.log(`🎛️ After: isEditingTicketTypesManually = true`);
    
    const updatedTicketTypes = [...ticketTypes];
    
    if (field === 'price' || field === 'quantity') {
      updatedTicketTypes[index][field] = parseInt(value) || 0;
    } else {
      updatedTicketTypes[index][field] = value;
    }
    
    setTicketTypes(updatedTicketTypes);
    console.log(`🎛️ Updated ticket types:`, updatedTicketTypes);
    
    // Log màu sắc change để debug
    if (field === 'color') {
      console.log(`🎨 Color changed for ${updatedTicketTypes[index].name}: ${value}`);
    }
  };

  const addTicketType = (e) => {
    // Nếu được gọi từ một sự kiện, ngăn chặn hành vi mặc định
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    // Mark as manually editing when user adds ticket type
    setIsEditingTicketTypesManually(true);
    
    // Generate màu ngẫu nhiên cho ticket type mới
    const colors = ['#8B5CF6', '#3B82F6', '#10B981', '#F97316', '#EF4444', '#F59E0B', '#06B6D4', '#84CC16'];
    const randomColor = colors[Math.floor(Math.random() * colors.length)];
    
    setTicketTypes([...ticketTypes, {
      name: '',
      price: 0,
      description: '',
      quantity: 0,
      color: randomColor
    }]);
    
    console.log('Added new ticket type, prevented form submission');
  };

  const removeTicketType = (index, e) => {
    // Ngăn chặn sự kiện mặc định nếu được gọi từ một sự kiện
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    if (ticketTypes.length > 1) {
      // Mark as manually editing when user removes ticket type
      setIsEditingTicketTypesManually(true);
      setTicketTypes(ticketTypes.filter((_, i) => i !== index));
      console.log('Removed ticket type at index', index, 'prevented form submission');
    }
  };

  const nextStep = () => {
    // Validation cho step 1 (thông tin cơ bản)
    if (currentStep === 1) {
      if (!eventData.startDate || !eventData.endDate) {
        setMessage('Vui lòng điền đầy đủ Ngày bắt đầu và Ngày kết thúc với giờ cụ thể.');
        return;
      }
      
      const startDate = new Date(eventData.startDate);
      const endDate = new Date(eventData.endDate);
      const now = new Date();
      
      // Kiểm tra thời gian trong tương lai
      if (startDate <= now) {
        setMessage('Ngày bắt đầu phải trong tương lai (ít nhất 1 giờ từ bây giờ).');
        return;
      }
      
      if (startDate >= endDate) {
        setMessage('Ngày kết thúc phải sau ngày bắt đầu.');
        return;
      }
      
      // Kiểm tra thời lượng tối thiểu (ít nhất 30 phút)
      const diffMs = endDate - startDate;
      if (diffMs < 30 * 60 * 1000) {
        setMessage('Sự kiện phải có thời lượng ít nhất 30 phút.');
        return;
      }
      
      // Clear message nếu validation pass
      setMessage('');
    }
    
    if (currentStep < 3) setCurrentStep(currentStep + 1);
  };

  const prevStep = () => {
    if (currentStep > 1) setCurrentStep(currentStep - 1);
  };

  // Handle event data change
  const handleEventDataChange = (e) => {
    const { name, value } = e.target;
    
    // Handle nested properties like location.venueName
    if (name.includes('.')) {
      const [parent, child] = name.split('.');
      setEventData(prev => ({
        ...prev,
        [parent]: {
          ...prev[parent],
          [child]: value
        }
      }));
    } else {
      setEventData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  // Improved seat counting function that checks if sections have any seats
  const countTotalSeats = () => {
    let totalSeats = 0;
    
    // Check if seatingMap and sections exist
    if (!customSeatingMap || !customSeatingMap.sections) {
      return 0;
    }
    
    // Count seats in each section
    customSeatingMap.sections.forEach(section => {
      if (section.rows) {
        section.rows.forEach(row => {
          if (row.seats && Array.isArray(row.seats)) {
            totalSeats += row.seats.length;
          }
        });
      }
    });
    
    console.log(`📊 countTotalSeats: Found ${totalSeats} seats in ${customSeatingMap.sections.length} sections`);
    return totalSeats;
  };

  // Update useEffect to also set city if it's missing
  useEffect(() => {
    // Set default organizers and city if not already set
    const updates = {};
    
    if (!eventData.organizers) {
      updates.organizers = 'Tổ chức bởi ' + (localStorage.getItem('username') || 'Event Hub');
    }
    
    if (eventData.location && !eventData.location.city) {
      updates.location = {
        ...eventData.location,
        city: 'Hồ Chí Minh' // Default city
      };
    }
    
    if (Object.keys(updates).length > 0) {
      setEventData(prev => ({
        ...prev,
        ...updates
      }));
    }
  }, [eventData]);

  // Define steps for the form
  const steps = [
    { id: 1, name: 'Thông tin' },
    { id: 2, name: 'Cấu hình' },
    { id: 3, name: 'Xác nhận' },
  ];

  // Update the event payload preparation in handleSubmit
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Chỉ submit khi ở bước cuối cùng (bước xác nhận)
    if (currentStep !== 3) {
      setCurrentStep(prevStep => prevStep + 1);
      console.log('Chưa đến bước cuối cùng, không submit form');
      return;
    }
    
    try {
      setLoading(true);
      console.log('🚀 Chuẩn bị gửi dữ liệu sự kiện...');
      
      // Preserve the exact seating map layout with all coordinates and properties
      // Make sure seatingMap is complete with all necessary components
      const processedSeatingMap = {
        ...customSeatingMap,
        layoutType: customSeatingMap.layoutType || 'custom',
        // Ensure stage is included with exact coordinates
        stage: customSeatingMap.stage || {
          x: 400,
          y: 50,
          width: 300,
          height: 60,
          centerX: 400,
          centerY: 50
        },
        // Ensure venue objects are included
        venueObjects: Array.isArray(customSeatingMap.venueObjects) ? customSeatingMap.venueObjects : []
      };
      
      // Verify that sections have proper coordinates
      if (processedSeatingMap.sections && processedSeatingMap.sections.length > 0) {
        processedSeatingMap.sections = processedSeatingMap.sections.map(section => {
          // Ensure each section is preserved with original coordinates
          return {
            ...section,
            rows: section.rows.map(row => {
              // Ensure each row has properly formatted seats with coordinates
              return {
                ...row,
                seats: row.seats.map(seat => {
                  // Ensure each seat has x,y coordinates and proper number format
                  return {
                    ...seat,
                    number: seat.number ? seat.number.toString() : "1",
                    x: typeof seat.x === 'number' ? seat.x : 0,
                    y: typeof seat.y === 'number' ? seat.y : 0,
                    status: seat.status || 'available'
                  };
                })
              };
            })
          };
        });
      }
      
      console.log('🚀 Gửi dữ liệu sự kiện:', {
        ...eventData,
        seatingMap: processedSeatingMap,
        ticketTypes
      });
      
      const apiUrl = `${process.env.REACT_APP_API_URL || 'https://eventbackendacr-c4dhdsbhfug2hkb2.australiacentral-01.azurewebsites.net//'}/events/create-with-seating`;
      console.log('🔧 Using API URL:', apiUrl);
      
      const response = await axios.post(apiUrl, {
        ...eventData,
        seatingMap: processedSeatingMap,
        ticketTypes
      }, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        }
      });
      
      console.log('✅ Tạo sự kiện thành công:', response.data);
      toast.success('Tạo sự kiện thành công!');
      
      // Đảm bảo thời gian để hiển thị toast trước khi chuyển trang
      setTimeout(() => {
        // Redirect to my events page instead of event detail page
        navigate('/my-events', { replace: true });
      }, 800);
      
    } catch (error) {
      console.error('❌ Lỗi khi tạo sự kiện:', error);
      console.log('📡 Server responded with error:', error.response?.status);
      console.log('📡 Error data:', error.response?.data);
      setMessage(`Lỗi: ${error.response?.data?.message || 'Không thể tạo sự kiện. Vui lòng thử lại sau.'}`);
      toast.error(`Lỗi: ${error.response?.data?.message || 'Không thể tạo sự kiện'}`);
    } finally {
      setLoading(false);
    }
  };

  // Improved addVenueObject function with better positioning
  const addVenueObject = (type, e) => {
    // Ngăn chặn form submit nếu được gọi từ sự kiện
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    // Sử dụng tọa độ mặc định hoặc vị trí khung nhìn nếu không có tọa độ được chỉ định
    const venueObjectTypes = {
      entrance: { name: 'Lối vào', color: '#10B981', width: 60, height: 30 },
      exit: { name: 'Lối ra', color: '#EF4444', width: 60, height: 30 },
      restroom: { name: 'WC', color: '#3B82F6', width: 40, height: 40 },
      food: { name: 'Thức ăn', color: '#8B5CF6', width: 40, height: 40 },
      drinks: { name: 'Đồ uống', color: '#F59E0B', width: 40, height: 40 },
      merchandise: { name: 'Bán hàng', color: '#F472B6', width: 40, height: 40 },
      info: { name: 'Thông tin', color: '#06B6D4', width: 40, height: 40 },
      security: { name: 'An ninh', color: '#4B5563', width: 40, height: 40 },
      accessible: { name: 'Hỗ trợ', color: '#84CC16', width: 40, height: 40 },
      firstaid: { name: 'Sơ cứu', color: '#DC2626', width: 40, height: 40 },
      elevator: { name: 'Thang máy', color: '#9333EA', width: 40, height: 40 },
      stairs: { name: 'Cầu thang', color: '#2563EB', width: 40, height: 40 },
      column: { name: 'Cột', color: '#6B7280', width: 20, height: 20 },
      camera: { name: 'Camera', color: '#1F2937', width: 30, height: 30 }
    };
    
    const objectInfo = venueObjectTypes[type] || venueObjectTypes.info;
    
    // Tính vị trí mặc định - offset tương đối so với sân khấu
    const stage = customSeatingMap.stage || { x: 400, y: 50, width: 200, height: 60 };
    
    // Tạo một đối tượng ID duy nhất cho mỗi loại vật thể
    const timestamp = Date.now();
    const uniqueID = `${type}-${timestamp}-${Math.floor(Math.random() * 1000)}`;
    
    // Tính vị trí mặc định dựa vào loại đối tượng
    let x, y;
    
    // Tính toán vị trí thích hợp dựa trên loại và số lượng đã có
    const existingObjects = customSeatingMap.venueObjects || [];
    const sameTypeCount = existingObjects.filter(obj => obj.objectType === type).length;
    
    // Vị trí mặc định dựa trên loại
    switch (type) {
      case 'entrance':
        x = stage.x - 170 - sameTypeCount * 70;
        y = stage.y + 450;
        break;
      case 'exit':
        x = stage.x + stage.width + 100 + sameTypeCount * 70;
        y = stage.y + 450;
        break;
      case 'restroom':
        x = stage.x - 170 - sameTypeCount * 50;
        y = stage.y + 350;
        break;
      case 'food':
      case 'drinks':
        x = stage.x + stage.width + 100 + sameTypeCount * 50;
        y = stage.y + 350 - (type === 'drinks' ? 50 : 0);
        break;
      default:
        // Đặt các vật thể khác ở vị trí ngẫu nhiên xung quanh sân khấu
        const angle = Math.random() * Math.PI; // Góc ngẫu nhiên từ 0 đến PI
        const distance = 300 + Math.random() * 150; // Khoảng cách từ 300 đến 450px
        const centerX = stage.x + stage.width / 2;
        const centerY = stage.y + stage.height / 2;
        x = centerX + Math.cos(angle) * distance;
        y = centerY + Math.sin(angle) * distance;
    }
    
    // Tạo đối tượng mới
    const newObject = {
      id: uniqueID,
      objectType: type,
      type: type,
      label: objectInfo.name,
      x: x,
      y: y,
      width: objectInfo.width,
      height: objectInfo.height,
      color: objectInfo.color
    };
    
    // Cập nhật seatingMap với đối tượng mới
    const updatedObjects = [...(customSeatingMap.venueObjects || []), newObject];
    
    // Cập nhật state
    setCustomSeatingMap(prev => {
      return {
        ...prev,
        venueObjects: updatedObjects
      };
    });
    
    console.log(`Added venue object: ${type} at (${x}, ${y}), prevented form submission`);
    
    return newObject;
  };
  
  // Thêm hàm để xóa vật thể phụ trợ
  const removeVenueObject = (index) => {
    setCustomSeatingMap(prev => ({
      ...prev,
      venueObjects: (prev.venueObjects || []).filter((_, i) => i !== index)
    }));
    
    toast.info('Đã xóa vật thể');
  };
  
  // Thêm hàm để cập nhật vật thể phụ trợ
  const updateVenueObject = (index, field, value) => {
    setCustomSeatingMap(prev => {
      const updatedObjects = [...(prev.venueObjects || [])];
      if (updatedObjects[index]) {
        updatedObjects[index] = {
          ...updatedObjects[index],
          [field]: value
        };
      }
      return {
        ...prev,
        venueObjects: updatedObjects
      };
    });
  };

  // Sửa hàm handleCustomSeatingMapChange để xử lý venueObjects và đếm ghế chính xác
  const handleCustomSeatingMapChange = (newSeatingMap) => {
    // Tránh cập nhật không cần thiết để ngăn vòng lặp vô hạn
    if (JSON.stringify(newSeatingMap) === JSON.stringify(customSeatingMap)) {
      return; // Không có thay đổi thực sự, bỏ qua cập nhật
    }
    
    // Giữ lại venueObjects từ state hiện tại nếu không được cung cấp trong newSeatingMap
    const updatedSeatingMap = {
      ...newSeatingMap,
      venueObjects: newSeatingMap.venueObjects || customSeatingMap.venueObjects
    };
    
    console.log('🔄 Updating seatingMap with venue objects:', updatedSeatingMap.venueObjects?.length || 0);
    
    // Cập nhật state một cách an toàn
    setCustomSeatingMap(updatedSeatingMap);
    
    // Đếm số ghế trong tất cả các sections
    const countSeats = () => {
      let totalSeats = 0;
      const sections = updatedSeatingMap.sections || [];
      
      sections.forEach(section => {
        if (section.rows) {
          section.rows.forEach(row => {
            totalSeats += (row.seats?.length || 0);
          });
        }
      });
      
      return totalSeats;
    };
    
    const totalSeatCount = countSeats();
    console.log(`📊 Tổng số ghế: ${totalSeatCount}, Số khu vực: ${updatedSeatingMap.sections?.length || 0}`);
    
    // Cập nhật seatOptions nếu cần
    if (totalSeatCount > 0 && seatOptions.totalSeats !== totalSeatCount) {
      setSeatOptions(prev => ({...prev, totalSeats: totalSeatCount}));
    }
    
    // Only auto-update ticket types if user hasn't manually edited them
    if (!isEditingTicketTypesManually) {
      const sections = updatedSeatingMap.sections || [];
      
      // Extract unique ticketTiers from sections
      const uniqueTicketTiers = [...new Set(sections.map(s => s.ticketTier).filter(Boolean))];
      
      if (uniqueTicketTiers.length > 0) {
        // Create ticket types based on unique tiers if they don't exist already
        const newTicketTypes = uniqueTicketTiers.map((tier, index) => {
          // Try to find existing ticket type with this ID
          const existingType = ticketTypes.find(tt => tt._id === tier);
          
          if (existingType) {
            // Cập nhật số lượng vé dựa trên số ghế trong section
            let seatCount = 0;
            sections.forEach(section => {
              if (section.ticketTier === tier && section.rows) {
                section.rows.forEach(row => {
                  seatCount += (row.seats?.length || 0);
                });
              }
            });
            
            return {
              ...existingType,
              quantity: seatCount > 0 ? seatCount : existingType.quantity
            };
          }
          
          // Tính số lượng vé cho loại vé mới
          let seatCount = 0;
          sections.forEach(section => {
            if (section.ticketTier === tier && section.rows) {
              section.rows.forEach(row => {
                seatCount += (row.seats?.length || 0);
              });
            }
          });
          
          // Create new ticket type
          return {
            _id: tier,
            name: `Loại vé ${index + 1}`,
            price: (index + 1) * 100000,
            description: `Mô tả loại vé ${index + 1}`,
            quantity: seatCount,
            color: getRandomColor()
          };
        });
        
        setTicketTypes(newTicketTypes);
      }
    }
  };
  
  // Thêm hàm ngăn chặn sự kiện click lan truyền từ các nút thêm vật thể
  const handleVenueObjectButtonClick = (e, type) => {
    e.preventDefault(); // Ngăn form submit
    e.stopPropagation(); // Ngăn sự kiện lan truyền
    addVenueObject(type, e);
  };

  // Auto-arrange sections to prevent overlapping
  const autoArrangeSections = (seatingMap) => {
    if (!seatingMap || !seatingMap.sections || seatingMap.sections.length === 0) {
      return seatingMap; // Nothing to arrange
    }

    // Clone to avoid mutation
    const clonedMap = JSON.parse(JSON.stringify(seatingMap));
    
    const isOverlapping = (rect1, rect2) => {
      // Thêm margin để đảm bảo khoảng cách an toàn
      const margin = 25; // Tăng lên từ 15 để đảm bảo khoảng cách lớn hơn
      return rect1.x < rect2.x + rect2.width + margin &&
         rect1.x + rect1.width + margin > rect2.x &&
         rect1.y < rect2.y + rect2.height + margin &&
         rect1.y + rect1.height + margin > rect2.y;
    };
    
    const arrangeInGrid = (sections) => {
      // Calculate optimal spacing based on layout type
      const layoutType = clonedMap.layoutType || 'custom';
      
      // Xác định khoảng cách giữa các khu vực dựa trên loại layout
      const spacingConfig = {
        footballStadium: {
          horizontalGap: 150,  // Tăng từ 100
          verticalGap: 120,    // Tăng từ 80
          stagePadding: 300,   // Tăng từ 250
          startX: 100,
          startY: 300,
          sectionPadding: 30   // Tăng từ 15
        },
        basketballArena: {
          horizontalGap: 120,  // Tăng từ 80
          verticalGap: 100,    // Tăng từ 70
          stagePadding: 250,   // Tăng từ 220
          startX: 120,
          startY: 280,
          sectionPadding: 25   // Tăng từ 12
        },
        default: {
          horizontalGap: 80,   // Tăng từ 60
          verticalGap: 70,     // Tăng từ 50
          stagePadding: 150,   // Tăng từ 120
          startX: 50,
          startY: 200,
          sectionPadding: 20   // Tăng từ 10
        }
      };
      
      const config = spacingConfig[layoutType] || spacingConfig.default;

      // Define stage padding - space around the stage
      const stage = clonedMap.stage || { x: 400, y: 50, width: 200, height: 60 };
      const stageBottom = stage.y + stage.height;

      // Get max width and height of sections for better arrangement
      let maxSectionWidth = 0;
      let maxSectionHeight = 0;
      sections.forEach(section => {
        maxSectionWidth = Math.max(maxSectionWidth, section.width || 120);
        maxSectionHeight = Math.max(maxSectionHeight, section.height || 100);
      });

      // Tăng kích thước tối thiểu để giảm chồng lấn
      maxSectionWidth = Math.max(maxSectionWidth, 180);  // Tăng từ 150
      maxSectionHeight = Math.max(maxSectionHeight, 150); // Tăng từ 120

      // Determine column count based on screen space
      const totalWidth = CANVAS_WIDTH - config.startX * 2;
      const columnsCount = Math.floor(totalWidth / (maxSectionWidth + config.horizontalGap));
      const columns = Math.max(1, Math.min(columnsCount, 3)); // Giảm từ 4 xuống 3 cột

      // Special layout for stadium/arena types
      if (['footballStadium', 'basketballArena'].includes(layoutType)) {
        // Place sections in U shape around the stage/field
        const leftStart = stage.x - config.stagePadding;
        const rightStart = stage.x + stage.width + config.horizontalGap;
        const bottomStart = stageBottom + config.verticalGap;
        
        // Calculate how many sections on each side
        const totalSections = sections.length;
        const sectionsPerSide = Math.max(1, Math.ceil(totalSections / 3));
        
        // Phân bổ lại các khu vực xung quanh sân
        sections.forEach((section, index) => {
          // Đặt độ rộng và cao tối thiểu để tránh sections quá nhỏ
          section.width = Math.max(section.width || 180, 180);
          section.height = Math.max(section.height || 150, 150);
          
          // Tính toán vị trí dựa trên index
          const groupIndex = Math.floor(index / sectionsPerSide);
          const indexInGroup = index % sectionsPerSide;
          
          if (groupIndex === 0) {
            // Left side sections - Đặt các khu vực bên trái cách xa hơn
            section.x = leftStart - section.width - config.sectionPadding * (indexInGroup + 1) * 1.5;
            section.y = stageBottom + indexInGroup * (section.height + config.verticalGap);
          } else if (groupIndex === 1) {
            // Bottom sections - Đặt các khu vực dưới cùng cách xa hơn
            const totalWidth = sectionsPerSide * section.width + (sectionsPerSide - 1) * config.horizontalGap * 1.5;
            const startX = stage.x + (stage.width - totalWidth) / 2;
            
            section.x = startX + indexInGroup * (section.width + config.horizontalGap * 1.5);
            section.y = bottomStart + config.stagePadding;
          } else {
            // Right side sections - Đặt các khu vực bên phải cách xa hơn
            section.x = rightStart + config.sectionPadding * (indexInGroup + 1) * 1.5;
            section.y = stageBottom + indexInGroup * (section.height + config.verticalGap);
          }
          
          // Đảm bảo nhãn khu vực được đặt ở vị trí phù hợp
          section.labelX = section.x + section.width / 2;
          section.labelY = section.y - 20;
        });
      } else {
        // Non-sports venues - standard grid layout with improved spacing
        const rows = Math.ceil(sections.length / columns);
        const horizontalSpacing = config.horizontalGap + maxSectionWidth;
        const verticalSpacing = config.verticalGap + maxSectionHeight;
        
        sections.forEach((section, index) => {
          // Đặt độ rộng và cao tối thiểu để tránh sections quá nhỏ
          section.width = Math.max(section.width || 180, 180);
          section.height = Math.max(section.height || 150, 150);
          
          // Calculate position based on grid pattern
          const row = Math.floor(index / columns);
          const col = index % columns;
          
          // Position below stage with padding
          const topStart = stageBottom + config.stagePadding;
          
          section.x = config.startX + col * (horizontalSpacing + 20); // Thêm 20px spacing
          section.y = topStart + row * (verticalSpacing + 20); // Thêm 20px spacing
          
          // Đảm bảo nhãn khu vực được đặt ở vị trí phù hợp
          section.labelX = section.x + section.width / 2;
          section.labelY = section.y - 20;
        });
      }
      
      // Check for any overlaps and fix them
      let hasOverlap = true;
      const maxIterations = 15; // Tăng từ 10 lên 15
      let iteration = 0;
      
      while (hasOverlap && iteration < maxIterations) {
        hasOverlap = false;
        iteration++;
        
        // Check all pairs of sections for overlaps
        for (let i = 0; i < sections.length; i++) {
          for (let j = i + 1; j < sections.length; j++) {
            const section1 = sections[i];
            const section2 = sections[j];
            
            if (isOverlapping(section1, section2)) {
              hasOverlap = true;
              // Move section2 to avoid overlap - sử dụng chiến lược phân tán
              if (section1.x <= section2.x) {
                // section2 nằm bên phải section1
                section2.x = section1.x + section1.width + config.sectionPadding * 2;
              } else {
                // section2 nằm bên trái section1
                section2.x = section1.x - section2.width - config.sectionPadding * 2;
              }
              
              // Nếu vẫn chồng lên theo chiều dọc
              if (isOverlapping(section1, section2)) {
                if (section1.y <= section2.y) {
                  // section2 nằm bên dưới section1
                  section2.y = section1.y + section1.height + config.sectionPadding * 2;
                } else {
                  // section2 nằm bên trên section1
                  section2.y = section1.y - section2.height - config.sectionPadding * 2;
                }
              }
              
              // Cập nhật lại vị trí nhãn
              section2.labelX = section2.x + section2.width / 2;
              section2.labelY = section2.y - 20;
            }
          }
        }
      }
      
      return sections;
    };
    
    clonedMap.sections = arrangeInGrid(clonedMap.sections);
    return clonedMap;
  };

  // Switch between design modes
  const handleDesignModeChange = (mode) => {
    // Luôn đặt mode là 'custom' bất kể input
    setDesignMode('custom');
    
    // Reset manual editing flag
    setIsEditingTicketTypesManually(false);
  };

  useEffect(() => {
    if (seatOptions.venueType && (!customSeatingMap || customSeatingMap.layoutType !== seatOptions.venueType)) {
      // Update stage and layout type when venue type changes
      const newStage = getInitialStage(seatOptions.venueType);
      setCustomSeatingMap(prevMap => ({
        ...prevMap,
        stage: newStage,
        layoutType: seatOptions.venueType
      }));
    }
  }, [seatOptions.venueType]);

  // Helper function to prevent form submission when pressing Enter
  const preventEnterSubmit = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
    }
  };

  // Thêm UI cho phần quản lý vật thể phụ trợ trong Step 3
  const renderVenueObjectsManager = () => {
    return (
      <div className="bg-gray-50 p-4 rounded-lg shadow-inner mb-6">
        <h3 className="text-lg font-semibold mb-3">Thêm vật thể phụ trợ</h3>
        <div className="flex flex-wrap gap-2 mb-4">
          {VENUE_OBJECT_TYPES.map(type => (
            <button
              key={type.value}
              className="px-3 py-2 bg-white border rounded-md hover:bg-gray-50 text-sm"
              style={{ borderColor: type.color, color: type.color }}
              onClick={(e) => handleVenueObjectButtonClick(e, type.value)}
              type="button" // Đảm bảo nút không submit form
            >
              {type.label}
            </button>
          ))}
        </div>
        
        {(customSeatingMap.venueObjects?.length > 0) ? (
          <div>
            <h4 className="text-md font-medium mb-2">Vật thể đã thêm ({customSeatingMap.venueObjects.length})</h4>
            <div className="bg-white rounded-md border border-gray-200 overflow-hidden">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Loại</th>
                    <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nhãn</th>
                    <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Vị trí</th>
                    <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Thao tác</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {customSeatingMap.venueObjects.map((obj, index) => (
                    <tr key={index}>
                      <td className="px-3 py-2 whitespace-nowrap">
                        <span className="inline-block w-3 h-3 rounded-full mr-2" style={{ backgroundColor: obj.color }}></span>
                        {VENUE_OBJECT_TYPES.find(t => t.value === obj.objectType)?.label || obj.objectType}
                      </td>
                      <td className="px-3 py-2 whitespace-nowrap">
                        <input
                          type="text"
                          className="border rounded px-2 py-1 text-sm w-full"
                          value={obj.label || ''}
                          onChange={(e) => updateVenueObject(index, 'label', e.target.value)}
                        />
                      </td>
                      <td className="px-3 py-2 whitespace-nowrap text-sm">
                        X: {obj.x?.toFixed(0) || 0}, Y: {obj.y?.toFixed(0) || 0}
                      </td>
                      <td className="px-3 py-2 whitespace-nowrap text-sm">
                        <button
                          onClick={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            removeVenueObject(index);
                          }}
                          className="text-red-600 hover:text-red-900"
                          type="button"
                        >
                          Xóa
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            <p className="text-sm text-gray-500 mt-2">
              Bạn có thể kéo thả các vật thể trên bản thiết kế để điều chỉnh vị trí.
            </p>
          </div>
        ) : (
          <p className="text-sm text-gray-500">Chưa có vật thể phụ trợ nào được thêm.</p>
        )}
      </div>
    );
  };

  // Return component
  return (
    <div style={styles.container}>
      <div style={styles.header}>
        <h2>🎪 Tạo Sự Kiện Có Chỗ Ngồi</h2>
        <p>Tạo sự kiện với hệ thống quản lý chỗ ngồi thông minh</p>
      </div>
      
      {/* Form Steps */}
      <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px' }}>
        {steps.map((step) => (
          <div
            key={step.id}
            style={{
              margin: '0 10px',
              padding: '10px 20px',
              borderRadius: '20px',
              backgroundColor: currentStep === step.id ? '#3b82f6' : '#e5e7eb',
              color: currentStep === step.id ? 'white' : 'black',
              fontWeight: currentStep === step.id ? 'bold' : 'normal'
            }}
          >
            <span style={{ marginRight: '5px' }}>{step.id}.</span>
            <span>{step.name}</span>
          </div>
        ))}
      </div>
      
      {message && <div style={{ padding: '10px', backgroundColor: message.includes('thành công') ? '#d1fae5' : '#fee2e2', borderRadius: '4px', marginBottom: '20px' }}>{message}</div>}
      
      <form onSubmit={handleSubmit} style={{ width: '100%' }}>
        {/* Step 1: Basic Information */}
        {currentStep === 1 && (
          <div style={styles.formSection}>
            <h3>📝 Thông Tin Sự Kiện</h3>
            
            {/* Upload Images Section */}
            <div style={styles.formSection}>
              <h4>🖼️ Hình Ảnh Sự Kiện</h4>
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px' }}>
                <ImageUpload
                  image={eventData.images.logo}
                  handleImageUpload={handleImageUpload}
                  type="logo"
                  title="Thêm logo sự kiện"
                  description="(Tỷ lệ 720x950, tối đa 5MB)"
                />
                <ImageUpload
                  image={eventData.images.banner}
                  handleImageUpload={handleImageUpload}
                  type="banner"
                  title="Thêm ảnh nền sự kiện"
                  description="(Tỷ lệ 1200x720, tối đa 10MB)"
                />
              </div>
            </div>
            
            <div style={styles.formGroup}>
              <label style={styles.label} htmlFor="title">Tên sự kiện *</label>
              <input
                style={styles.input}
                type="text"
                id="title"
                name="title"
                value={eventData.title}
                onChange={handleEventDataChange}
                placeholder="Ví dụ: Concert nhạc pop 2024"
                required
                onKeyDown={preventEnterSubmit}
              />
            </div>
            
            <div style={styles.formGroup}>
              <label style={styles.label} htmlFor="description">Mô tả ngắn *</label>
              <textarea
                style={{...styles.input, minHeight: '100px'}}
                id="description"
                name="description"
                value={eventData.description}
                onChange={handleEventDataChange}
                placeholder="Mô tả ngắn gọn về sự kiện"
                rows="3"
                required
                onKeyDown={preventEnterSubmit}
              />
            </div>
            
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px' }}>
              <div style={styles.formGroup}>
                <label style={styles.label} htmlFor="startDate">Ngày bắt đầu *</label>
                <input
                  style={styles.input}
                  type="datetime-local"
                  id="startDate"
                  name="startDate"
                  value={eventData.startDate}
                  onChange={handleEventDataChange}
                  required
                  onKeyDown={preventEnterSubmit}
                />
              </div>
              
              <div style={styles.formGroup}>
                <label style={styles.label} htmlFor="endDate">Ngày kết thúc *</label>
                <input
                  style={styles.input}
                  type="datetime-local"
                  id="endDate"
                  name="endDate"
                  value={eventData.endDate}
                  onChange={handleEventDataChange}
                  required
                  onKeyDown={preventEnterSubmit}
                />
              </div>
            </div>
            
            {/* Location */}
            <div style={styles.formGroup}>
              <label style={styles.label} htmlFor="venueName">Tên địa điểm</label>
              <input
                style={styles.input}
                type="text"
                id="venueName"
                name="location.venueName"
                value={eventData.location.venueName}
                onChange={handleEventDataChange}
                placeholder="Ví dụ: Sân vận động Mỹ Đình"
                onKeyDown={preventEnterSubmit}
              />
            </div>
            
            <div style={styles.formGroup}>
              <label style={styles.label} htmlFor="address">Địa chỉ</label>
              <input
                style={styles.input}
                type="text"
                id="address"
                name="location.address"
                value={eventData.location.address}
                onChange={handleEventDataChange}
                placeholder="Địa chỉ cụ thể"
                onKeyDown={preventEnterSubmit}
              />
            </div>
            
            <div style={styles.stepActions}>
              <div></div> {/* Empty div for spacing */}
              <button type="button" style={styles.button} onClick={nextStep}>Tiếp theo →</button>
            </div>
          </div>
        )}

        {/* Step 2: Seat & Ticket Configuration (đổi từ step 3) */}
        {currentStep === 2 && (
          <div className="form-section">
            {/* Bỏ Design Mode Selection */}
            
            {/* Custom Mode */}
            <div className="custom-mode-section">
              <h3>🎨 Thiết kế sơ đồ tùy chỉnh</h3>
              <p>Kéo thả các khu vực, sân khấu để tạo layout phù hợp với sự kiện của bạn</p>
              
              {/* Info about auto-arrange */}
              <div className="info-box">
          {/* Step 2: Seat & Ticket Configuration (đổi từ step 3) */}
          {currentStep === 2 && (
            <div className="form-section">
              {/* Bỏ Design Mode Selection */}
              
              {/* Custom Mode */}
              <div className="custom-mode-section">
                <h3>🎨 Thiết kế sơ đồ tùy chỉnh</h3>
                <p>Kéo thả các khu vực, sân khấu để tạo layout phù hợp với sự kiện của bạn</p>
                
                {/* Info about auto-arrange */}
                <div className="info-box">
                  <p>ℹ️ <strong>Lưu ý:</strong> Khi tạo sự kiện, hệ thống sẽ tự động căn chỉnh các sections để tránh chồng lấp, nhưng vẫn giữ nguyên layout tổng thể mà bạn đã thiết kế.</p>
                </div>
                
                {/* Auto-arrange button */}
                <div className="auto-arrange-section">
                  <button
                    type="button"
                    className="btn-secondary"
                    onClick={() => {
                      console.log('🔧 Manual auto-arrange triggered');
                      const arrangedMap = autoArrangeSections(customSeatingMap);
                      setCustomSeatingMap(arrangedMap);
                      console.log('✅ Sections auto-arranged manually');
                      
                      // Hiển thị toast thông báo
                      toast.info('Đã căn chỉnh tự động các khu vực để tránh chồng lấp', {
                        position: "top-right",
                        autoClose: 3000,
                        hideProgressBar: false,
                        closeOnClick: true,
                        pauseOnHover: true,
                        draggable: true,
                        progress: undefined,
                      });
                    }}
                  >
                    🔧 Xem trước căn chỉnh tự động
                  </button>
                  <small>Kiểm tra cách hệ thống sẽ căn chỉnh các sections để tránh chồng lấp</small>
                </div>
                
                <div className="seating-designer-container">
                  <InteractiveSeatingDesigner 
                    initialSeatingMap={customSeatingMap}
                    onSeatingMapChange={handleCustomSeatingMapChange}
                    ticketTypes={ticketTypes}
                    onTicketTypesChange={setTicketTypes}
                  />
                </div>

                {/* Add Venue Objects Manager here */}
                {renderVenueObjectsManager()}
              </div>

              {/* Ticket Types */}
              <div className="form-section">
                <h3>🎫 Loại Vé</h3>
                <p>Thiết lập các loại vé cho sự kiện của bạn.</p>
                
                {/* Manual editing indicator */}
                {isEditingTicketTypesManually && (
                  <div className="manual-editing-indicator">
                    <p>📝 Bạn đang chỉnh sửa thủ công. Ticket types sẽ không tự động sync với seating map.</p>
                    <button
                      type="button"
                      className="btn-secondary"
                      onClick={() => setIsEditingTicketTypesManually(false)}
                    >
                      🔄 Bật lại Auto-sync với seating map
                    </button>
                  </div>
                )}
                
                {ticketTypes.map((ticketType, index) => (
                  <div key={index} className="ticket-type-item">
                    <div className="ticket-type-header">
                      <h4>🎫 {ticketType.name || `Loại vé ${index + 1}`}</h4>
                      {ticketTypes.length > 1 && (
                        <button
                          type="button"
                          className="remove-ticket-type"
                          onClick={(e) => removeTicketType(index, e)}
                        >
                          Xóa
                        </button>
                      )}
                    </div>

                    <div className="form-row">
                      <div className="form-group">
                        <label>Tên loại vé *</label>
                        <input
                          type="text"
                          value={ticketType.name}
                          onChange={(e) => handleTicketTypeChange(index, 'name', e.target.value)}
                          placeholder="VIP, Thường, ..."
                          required
                          onKeyDown={preventEnterSubmit}
                        />
                      </div>

                      <div className="form-group">
                        <label>Giá (VND) *</label>
                        <input
                          type="number"
                          value={ticketType.price}
                          onChange={(e) => handleTicketTypeChange(index, 'price', e.target.value)}
                          min="0"
                          placeholder="500000"
                          required
                          onKeyDown={preventEnterSubmit}
                        />
                      </div>

                      <div className="form-group">
                        <label>Số lượng *</label>
                        <input
                          type="number"
                          value={ticketType.quantity}
                          onChange={(e) => handleTicketTypeChange(index, 'quantity', e.target.value)}
                          min="0"
                          required
                          onKeyDown={preventEnterSubmit}
                        />
                      </div>

                      <div className="form-group">
                        <label>Màu sắc</label>
                        <div className="color-picker-container">
                          <input
                            type="color"
                            value={ticketType.color || '#6B7280'}
                            onChange={(e) => handleTicketTypeChange(index, 'color', e.target.value)}
                            className="color-picker"
                            onKeyDown={preventEnterSubmit}
                          />
                          <span className="color-preview" style={{ backgroundColor: ticketType.color || '#6B7280' }}></span>
                        </div>
                      </div>
                    </div>

                    <div className="form-group">
                      <label>Mô tả</label>
                      <textarea
                        value={ticketType.description}
                        onChange={(e) => handleTicketTypeChange(index, 'description', e.target.value)}
                        placeholder="Mô tả về loại vé này"
                        rows="2"
                        onKeyDown={preventEnterSubmit}
                      />
                    </div>
                  </div>
                ))}

                <button
                  type="button"
                  className="add-ticket-type"
                  onClick={(e) => {
                    e.preventDefault();
                    addTicketType(e);
                  }}
                >
                  + Thêm loại vé
                </button>

                <div className="step-actions">
                  <button type="button" onClick={prevStep}>← Quay lại</button>
                  <button type="button" onClick={nextStep}>Tiếp theo →</button>
                </div>
              </div>
            </div>
          )}

          {/* Step 3: Confirmation (đổi từ step 4) */}
          {currentStep === 3 && (
            <div className="form-section">
              <h3>✅ Xác Nhận Thông Tin</h3>
              <p>Vui lòng kiểm tra lại thông tin trước khi tạo sự kiện</p>
              
              <div className="confirmation-details">
                <div className="confirmation-section">
                  <h4>📝 Thông Tin Sự Kiện</h4>
                  <div className="confirmation-item">
                    <span>Tên sự kiện:</span>
                    <strong>{eventData.title}</strong>
                  </div>
                  <div className="confirmation-item">
                    <span>Thời gian:</span>
                    <strong>
                      {new Date(eventData.startDate).toLocaleString('vi-VN')} - {new Date(eventData.endDate).toLocaleString('vi-VN')}
                    </strong>
                  </div>
                  <div className="confirmation-item">
                    <span>Địa điểm:</span>
                    <strong>{eventData.location.venueName}, {eventData.location.address}</strong>
                  </div>
                </div>
                
                <div className="confirmation-section">
                  <h4>🎫 Thông Tin Vé</h4>
                  <div className="ticket-types-summary">
                    {ticketTypes.map((tt, index) => (
                      <div key={index} className="ticket-type-summary">
                        <div className="ticket-color" style={{ backgroundColor: tt.color }}></div>
                        <div className="ticket-details">
                          <strong>{tt.name}</strong>
                          <span>{tt.quantity} vé × {tt.price.toLocaleString('vi-VN')}đ</span>
                        </div>
                      </div>
                    ))}
                  </div>
                  <div className="confirmation-item total">
                    <span>Tổng số vé:</span>
                    <strong>{ticketTypes.reduce((sum, tt) => sum + tt.quantity, 0)} vé</strong>
                  </div>
                </div>
                
                <div className="confirmation-section">
                  <h4>🗺️ Sơ Đồ Chỗ Ngồi</h4>
                  <div className="seating-map-summary">
                    <p>Sơ đồ tùy chỉnh với {customSeatingMap.sections.length} khu vực</p>
                    <div className="seating-preview-container">
                      <SeatingPreview 
                        seatingMap={customSeatingMap} 
                        showLabels={true}
                        interactive={false}
                      />
                    </div>

                    {/* Display venue objects in confirmation */}
                    {customSeatingMap.venueObjects && customSeatingMap.venueObjects.length > 0 && (
                      <div className="venue-objects-summary mt-4">
                        <h5 className="text-md font-semibold">Vật thể phụ trợ ({customSeatingMap.venueObjects.length}):</h5>
                        <div className="flex flex-wrap gap-2 mt-2">
                          {customSeatingMap.venueObjects.map((obj, idx) => (
                            <div 
                              key={idx}
                              className="px-2 py-1 rounded-md text-sm flex items-center"
                              style={{ backgroundColor: `${obj.color}20`, color: obj.color, border: `1px solid ${obj.color}` }}
                            >
                              <span className="font-medium">{obj.label || VENUE_OBJECT_TYPES.find(t => t.value === obj.objectType)?.label || obj.objectType}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
              
              <div className="step-actions">
                <button type="button" onClick={prevStep}>← Quay lại</button>
                <button 
                  type="submit" 
                  className="submit-button"
                  disabled={loading}
                >
                  {loading ? '🔄 Đang xử lý...' : '✅ Tạo Sự Kiện'}
                </button>
              </div>
            </div>
          )}
        </form>
      </div>
    </div>
  );
};

export default CreateEventWithSeating; 