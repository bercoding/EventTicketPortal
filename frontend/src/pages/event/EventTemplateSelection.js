import React from 'react';
import { useNavigate } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { 
  faTheaterMasks,
  faUsers,
  faChair,
  faArrowRight,
  faMusic,
  faFootballBall,
  faFilm,
  faHandshake,
  faChalkboardTeacher,
  faMicrophone,
  faCalendarAlt,
  faGlobe,
  faLaptop,
  faTree,
  faMapMarkedAlt,
  faVideo,
  faBroadcastTower
} from '@fortawesome/free-solid-svg-icons';
import './CreateEvent.css';

const EVENT_TEMPLATES = [
  {
    id: 'seating',
    title: 'S·ª± ki·ªán c√≥ gh·∫ø ng·ªìi c·ªë ƒë·ªãnh',
    description: 'S·ª± ki·ªán trong nh√† v·ªõi gh·∫ø ng·ªìi ƒë∆∞·ª£c s·∫Øp x·∫øp theo s∆° ƒë·ªì c·ªë ƒë·ªãnh, kh√°ch h√†ng ch·ªçn gh·∫ø c·ª• th·ªÉ',
    icon: faChair,
    color: 'from-blue-600 to-purple-600',
    features: [
      'S∆° ƒë·ªì gh·∫ø ng·ªìi chi ti·∫øt',
      'Kh√°ch ch·ªçn gh·∫ø c·ª• th·ªÉ khi mua v√©',
      'Ph√¢n chia khu v·ª±c VIP/th∆∞·ªùng r√µ r√†ng',
      'Qu·∫£n l√Ω ch·ªó ng·ªìi ch√≠nh x√°c 100%'
    ],
    examples: [
      { icon: faMusic, text: 'Concert trong nh√†' },
      { icon: faTheaterMasks, text: 'Di·ªÖn k·ªãch, nh√† h√°t' },
      { icon: faFilm, text: 'R·∫°p chi·∫øu phim' },
      { icon: faFootballBall, text: 'S√¢n v·∫≠n ƒë·ªông c√≥ gh·∫ø' }
    ],
    route: '/create-event-with-seating',
    locationTypes: ['offline'],
    hasSeatingMap: true,
    ticketSelectionType: 'specific_seat'
  },
  {
    id: 'general',
    title: 'S·ª± ki·ªán tham gia t·ª± do',
    description: 'S·ª± ki·ªán ngo√†i tr·ªùi ho·∫∑c kh√¥ng gian m·ªü, kh√°ch t·ª± do di chuy·ªÉn, ch·ªâ c·∫ßn mua v√© theo khu v·ª±c',
    icon: faUsers,
    color: 'from-green-600 to-teal-600',
    features: [
      'Kh√¥ng gh·∫ø ng·ªìi c·ªë ƒë·ªãnh',
      'Ph√¢n khu v·ª±c linh ho·∫°t (VIP, General)',
      'Kh√°ch t·ª± do di chuy·ªÉn trong khu v·ª±c',
      'Qu·∫£n l√Ω theo s·ªë l∆∞·ª£ng ng∆∞·ªùi/khu v·ª±c'
    ],
    examples: [
      { icon: faTree, text: 'Festival ngo√†i tr·ªùi' },
      { icon: faHandshake, text: 'H·ªôi th·∫£o, networking' },
      { icon: faChalkboardTeacher, text: 'Workshop, ƒë√†o t·∫°o' },
      { icon: faCalendarAlt, text: 'Tri·ªÉn l√£m, h·ªôi ch·ª£' }
    ],
    route: '/create-event',
    locationTypes: ['offline'],
    hasSeatingMap: false,
    ticketSelectionType: 'zone_based'
  },
  {
    id: 'online',
    title: 'S·ª± ki·ªán tr·ª±c tuy·∫øn',
    description: 'S·ª± ki·ªán ho√†n to√†n online qua video call, livestream, kh√¥ng c·∫ßn ƒë·ªãa ƒëi·ªÉm v·∫≠t l√Ω',
    icon: faGlobe,
    color: 'from-orange-600 to-red-600',
    features: [
      'Ho√†n to√†n tr·ª±c tuy·∫øn',
      'Link tham gia qua email',
      'Streaming/Video conference',
      'Kh√¥ng gi·ªõi h·∫°n ƒë·ªãa l√Ω'
    ],
    examples: [
      { icon: faLaptop, text: 'Webinar, kh√≥a h·ªçc online' },
      { icon: faVideo, text: 'H·ªôi ngh·ªã tr·ª±c tuy·∫øn' },
      { icon: faBroadcastTower, text: 'Livestream show' },
      { icon: faMicrophone, text: 'Podcast live' }
    ],
    route: '/create-event',
    locationTypes: ['online'],
    hasSeatingMap: false,
    ticketSelectionType: 'registration_only'
  }
];

const EventTemplateSelection = () => {
  const navigate = useNavigate();

  const handleTemplateSelect = (template) => {
    navigate(template.route, { 
      state: { 
        templateType: template.id,
        templateName: template.title 
      }
    });
  };

  return (
    <div className="create-event-container">
      <div className="create-event-header">
        <h2>T·∫°o S·ª± Ki·ªán M·ªõi</h2>
        <p>Ch·ªçn lo·∫°i s·ª± ki·ªán ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªëi ∆∞u</p>
      </div>

      <div className="create-event-form">
        <div className="form-section">
          <h3>üéØ Ch·ªçn Lo·∫°i S·ª± Ki·ªán</h3>
          <p>M·ªói lo·∫°i s·ª± ki·ªán c√≥ nh·ªØng t√≠nh nƒÉng v√† c√°ch qu·∫£n l√Ω kh√°c nhau</p>
          
          <div className="template-selection-grid">
            {EVENT_TEMPLATES.map((template) => (
              <div 
                key={template.id}
                className="template-card"
                onClick={() => handleTemplateSelect(template)}
              >
                <div className={`template-header bg-gradient-to-r ${template.color}`}>
                  <FontAwesomeIcon icon={template.icon} className="template-icon" />
                  <h4>{template.title}</h4>
                </div>
                
                <div className="template-body">
                  <p className="template-description">{template.description}</p>
                  
                  <div className="template-features">
                    <h5>‚ú® T√≠nh nƒÉng ch√≠nh:</h5>
                    <ul>
                      {template.features.map((feature, index) => (
                        <li key={index}>{feature}</li>
                      ))}
                    </ul>
                  </div>
                  
                  <div className="template-examples">
                    <h5>üìã V√≠ d·ª• s·ª± ki·ªán:</h5>
                    <div className="example-grid">
                      {template.examples.map((example, index) => (
                        <div key={index} className="example-item">
                          <FontAwesomeIcon icon={example.icon} />
                          <span>{example.text}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  <button className="select-template-btn">
                    Ch·ªçn lo·∫°i n√†y
                    <FontAwesomeIcon icon={faArrowRight} />
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default EventTemplateSelection; 